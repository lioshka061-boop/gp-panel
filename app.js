(function () {
  const STORAGE_KEY = "ztb_state_v1";
  const THEME_STORAGE_KEY = "ztb_theme_manual";
  const NOTES_HISTORY_LIMIT = 50;

  const panel = document.getElementById("ztb-panel");
  const mainTitle = document.getElementById("ztb-title");
  const stepHeading = document.getElementById("ztb-step-heading");
  const descEl = document.getElementById("ztb-desc");
  const tagsEl = document.getElementById("ztb-tags");
  const statusEl = document.getElementById("ztb-status");
  const promptEl = document.getElementById("ztb-prompt");
  const noteEl = document.getElementById("ztb-note");
  const contentEl = document.getElementById("ztb-content");
  const sectionsEl = document.getElementById("ztb-sections");
  const searchEl = document.getElementById("ztb-search");
  const progressFill = document.getElementById("ztb-progress-fill");
  const progressText = document.getElementById("ztb-progress-text");
  const toastEl = document.getElementById("ztb-toast");
  const backdrop = document.getElementById("ztb-backdrop");

  const helpModal = document.getElementById("ztb-modal-help");
  const troublesModal = document.getElementById("ztb-modal-troubles");
  const tokenModal = document.getElementById("ztb-modal-token");
  const tourModal = document.getElementById("ztb-modal-tour");
  const tourOverlay = document.getElementById("ztb-tour-overlay");
  const tourTooltip = document.getElementById("ztb-tour-tooltip");
  const tourText = document.getElementById("tour-text");

  const quickActions = document.getElementById("ztb-quick-actions");
  const copyButton = document.getElementById("ztb-copy");
  const openButton = document.getElementById("ztb-open");
  const problemButton = document.getElementById("ztb-problem");

  const defaultState = {
    started: false,
    currentStep: 0,
    botType: "",
    mode: "",
    environment: "",
    backend: "",
    addons: { design: false, stats: false, payments: false },
    payments: { provider: "" },
    notes: {},
    ack: {},
  };

  const clone = (value) =>
    typeof structuredClone === "function" ? structuredClone(value) : JSON.parse(JSON.stringify(value));

  let state = loadState();
  let uiState = {
    sectionsOpen: {},
    search: "",
    tourIndex: 0,
    tourActive: false,
    lastMilestone: 0,
  };

  const botTypes = {
    crm: {
      title: "CRM",
      desc: "–í–µ–¥–µ –∫–ª—ñ—î–Ω—Ç—ñ–≤ —ñ –∑–∞–≤–¥–∞–Ω–Ω—è",
      commands: "/start,/help,/add,/clients,/tasks,/done,/stats",
    },
    task: {
      title: "Task Manager",
      desc: "–°–ø–∏—Å–æ–∫ —Å–ø—Ä–∞–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥–∏",
      commands: "/start,/help,/add,/list,/done,/skip,/stats",
    },
    habit: {
      title: "Habit Tracker",
      desc: "–©–æ–¥–µ–Ω–Ω—ñ –∑–≤–∏—á–∫–∏ –π –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è",
      commands: "/start,/help,/add,/habits,/done,/streak,/plan,/stats",
    },
    faq: {
      title: "FAQ / Support",
      desc: "–í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –Ω–∞ —Ç–∏–ø–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è",
      commands: "/start,/help,/faq,/contact,/tips",
    },
    shop: {
      title: "Shop",
      desc: "–ú—ñ–Ω—ñ-–º–∞–≥–∞–∑–∏–Ω —É Telegram",
      commands: "/start,/help,/catalog,/buy,/cart,/pay,/support",
    },
    booking: {
      title: "Booking",
      desc: "–ó–∞–ø–∏—Å –Ω–∞ –ø–æ—Å–ª—É–≥–∏",
      commands: "/start,/help,/book,/slots,/cancel,/contact",
    },
    custom: {
      title: "Custom",
      desc: "–°–≤—ñ–π —Å—Ü–µ–Ω–∞—Ä—ñ–π",
      commands: "/start,/help",
    },
  };

  const commandDescriptions = {
    "/start": "–ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É",
    "/help": "–ü–æ—è—Å–Ω–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥",
    "/add": "–î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å",
    "/clients": "–°–ø–∏—Å–æ–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤",
    "/tasks": "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á",
    "/done": "–ü–æ–∑–Ω–∞—á–∏—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω–µ",
    "/stats": "–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
    "/list": "–ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫",
    "/skip": "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —ñ–∑ –ø–æ—è—Å–Ω–µ–Ω–Ω—è–º",
    "/habits": "–°–ø–∏—Å–æ–∫ –∑–≤–∏—á–æ–∫",
    "/streak": "–ü—Ä–æ–≥—Ä–µ—Å —Å–µ—Ä—ñ—ó",
    "/plan": "–ü–ª–∞–Ω –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å",
    "/faq": "–ü–æ–ø—É–ª—è—Ä–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è",
    "/contact": "–ó–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –ª—é–¥–∏–Ω–æ—é",
    "/tips": "–ö–æ—Ä–∏—Å–Ω—ñ –ø—ñ–¥–∫–∞–∑–∫–∏",
    "/catalog": "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–æ–≤–∞—Ä–∏",
    "/buy": "–°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
    "/cart": "–ü–æ–∫–∞–∑–∞—Ç–∏ –∫–æ—à–∏–∫",
    "/pay": "–û–ø–ª–∞—Ç–∞",
    "/support": "–ü—ñ–¥—Ç—Ä–∏–º–∫–∞",
    "/book": "–ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —Å–ª–æ—Ç",
    "/slots": "–í—ñ–ª—å–Ω—ñ —á–∞—Å–∏",
    "/cancel": "–°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å",
  };

  const iconLabels = {
    guide: { label: "guide", icon: "üìò" },
    file: { label: "file", icon: "üìÑ" },
    chatgpt: { label: "chatgpt", icon: "üí¨" },
    cursor: { label: "cursor", icon: "üíª" },
    terminal: { label: "terminal", icon: "‚å®Ô∏è" },
    telegram: { label: "telegram", icon: "‚úâÔ∏è" },
    check: { label: "check", icon: "‚úÖ" },
    env: { label: "env", icon: "üõ†Ô∏è" },
  };

  const backendOptions = {
    json: {
      title: "JSON —Ñ–∞–π–ª",
      desc: "–ü—Ä–æ—Å—Ç–∏–π —Ñ–∞–π–ª data/db.json",
      steps: [
        {
          id: "backend-json-file",
          title: "–°—Ç–≤–æ—Ä–∏ data/db.json",
          desc: "–°—Ç–≤–æ—Ä–∏ –ø–∞–ø–∫—É data —Ç–∞ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ñ–∞–π–ª db.json ‚Äî —Ü–µ —Ç–≤–æ—è –±–∞–∑–∞.",
          prompt:
            "–°—Ç–≤–æ—Ä–∏ —É –ø—Ä–æ–µ–∫—Ç—ñ –ø–∞–ø–∫—É data (—è–∫—â–æ —ó—ó –Ω–µ–º–∞—î) —Ç–∞ –¥–æ–¥–∞–π –ø–æ—Ä–æ–∂–Ω—ñ–π —Ñ–∞–π–ª db.json. –í—ñ–Ω –∑–±–µ—Ä—ñ–≥–∞—Ç–∏–º–µ –¥–∞–Ω—ñ –±–æ—Ç–∞.",
        },
        {
          id: "backend-json-code",
          title: "–î–æ–¥–∞–π —Ñ—É–Ω–∫—Ü—ñ—ó —á–∏—Ç–∞–Ω–Ω—è/–∑–∞–ø–∏—Å—É",
          desc: "–ü–æ–ø—Ä–æ—Å–∏ –®–Ü –¥–æ–¥–∞—Ç–∏ load_json() —ñ save_json().",
          prompt:
            "Task: add helper functions load_json_data() and save_json_data(path='data/db.json') that safely read/write JSON. Handle –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —Ñ–∞–π–ª—É —ñ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ñ–∞–π–ª.",
          chat: "chat2",
        },
        {
          id: "backend-json-wire",
          title: "–ü—ñ–¥–∫–ª—é—á–∏ –∫–æ–º–∞–Ω–¥–∏",
          desc: "–ó—Ä–æ–±–∏, —â–æ–± /add, /list, /done –ø—Ä–∞—Ü—é–≤–∞–ª–∏ –∑ –Ω–æ–≤–∏–º —Ñ–∞–π–ª–æ–º.",
          prompt:
            "Task: update command handlers so /add writes to data/db.json, /list —á–∏—Ç–∞—î –∑–∞–ø–∏—Å–∏, –∞ /done –æ–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ load_json_data/save_json_data.",
          chat: "chat2",
        },
        {
          id: "backend-json-test",
          title: "–ü–µ—Ä–µ–≤—ñ—Ä /add",
          desc: "–ó–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞ —Ç–∞ –ø–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è, —â–æ —Ñ–∞–π–ª –æ–Ω–æ–≤–∏–≤—Å—è.",
          prompt:
            "Manual test: activate venv, run python main.py, –Ω–∞–¥—ñ—à–ª–∏ /add —ñ –ø–µ—Ä–µ–≤—ñ—Ä, —â–æ —É data/db.json –∑'—è–≤–∏–≤—Å—è –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å.",
        },
      ],
    },
    sqlite: {
      title: "SQLite",
      desc: "–ë–∞–∑–∞ —É —Ñ–∞–π–ª—ñ db.sqlite3",
      steps: [
        {
          id: "backend-sqlite-file",
          title: "–ü—ñ–¥–≥–æ—Ç—É–π—Ç–µ db.sqlite3",
          desc: "–ù–∞–ª–∞—à—Ç—É–π —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –±–∞–∑–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ.",
          prompt:
            "Task: add init_db() that —Å—Ç–≤–æ—Ä—é—î —Ñ–∞–π–ª db.sqlite3 —Ç–∞ —Ç–∞–±–ª–∏—Ü—é tasks (id INTEGER PRIMARY KEY, name TEXT, status TEXT,created_at TIMESTAMP). –í–∏–∫–ª–∏—á–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É.",
          chat: "chat2",
        },
        {
          id: "backend-sqlite-crud",
          title: "CRUD-—Ñ—É–Ω–∫—Ü—ñ—ó",
          desc: "–ü–æ–ø—Ä–æ—Å–∏ –®–Ü –¥–æ–¥–∞—Ç–∏ aiosqlite-—Ö–µ–ª–ø–µ—Ä–∏.",
          prompt:
            "Task: implement async add_task(), list_tasks(), update_task_status() using aiosqlite –∑ db.sqlite3.",
          chat: "chat2",
        },
        {
          id: "backend-sqlite-wire",
          title: "–ó'—î–¥–Ω–∞–π –∫–æ–º–∞–Ω–¥–∏",
          desc: "–ü—ñ–¥–∫–ª—é—á–∏ /add, /list, /done –¥–æ SQLite.",
          prompt:
            "Task: update command handlers —â–æ–± –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–ª–∏ add_task/list_tasks/update_task_status –∑—ñ SQLite.",
          chat: "chat2",
        },
        {
          id: "backend-sqlite-test",
          title: "–ü–µ—Ä–µ–≤—ñ—Ä /add",
          desc: "–ó–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞ —ñ –ø–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è, —â–æ –∑–∞–ø–∏—Å –¥–æ–¥–∞—î—Ç—å—Å—è.",
          prompt:
            "Manual test: activate venv, run python main.py, –Ω–∞–¥—ñ—à–ª–∏ /add —ñ –ø–µ—Ä–µ–≤—ñ—Ä, —â–æ —É –±–∞–∑—ñ –∑'—è–≤–∏–≤—Å—è –∑–∞–ø–∏—Å.",
        },
      ],
    },
    googlesheets: {
      title: "Google Sheets",
      desc: "–û–Ω–ª–∞–π–Ω-—Ç–∞–±–ª–∏—Ü—è —è–∫ –±–∞–∑–∞",
      steps: [
        {
          id: "backend-sheets-file",
          title: "–ü—ñ–¥–≥–æ—Ç—É–π—Ç–µ —Ç–∞–±–ª–∏—Ü—é",
          desc: "–°—Ç–≤–æ—Ä–∏ Google Sheet —Ç–∞ –¥–∞–π –¥–æ—Å—Ç—É–ø –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º.",
          prompt:
            "Task: —Å—Ç–≤–æ—Ä–∏—Ç–∏ Google Sheet –¥–ª—è –±–æ—Ç–∞. –ù–∞–¥—ñ—à–ª–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∑ –¥–æ—Å—Ç—É–ø–æ–º –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.",
        },
        {
          id: "backend-sheets-api",
          title: "–ù–∞–ª–∞—à—Ç—É–π gspread",
          desc: "–î–æ–¥–∞–π –∫–ª—é—á—ñ —Ç–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —á–µ—Ä–µ–∑ gspread.",
          prompt:
            "Task: –¥–æ–¥–∞–π gspread —Ç–∞ google-auth. –£ .env –∑–±–µ—Ä–µ–∂–∏ JSON –∫–ª—é—á —É –∑–º—ñ–Ω–Ω—ñ–π GOOGLE_SERVICE_ACCOUNT. –ü—ñ–¥–∫–ª—é—á–∏—Å—è –¥–æ —Ç–∞–±–ª–∏—Ü—ñ.",
          chat: "chat2",
        },
        {
          id: "backend-sheets-wire",
          title: "–ü—ñ–¥–∫–ª—é—á–∏ –∫–æ–º–∞–Ω–¥–∏",
          desc: "–ó–∞–ø–∏—Å/—á–∏—Ç–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —É —Ç–∞–±–ª–∏—Ü—é.",
          prompt:
            "Task: –æ–Ω–æ–≤–∏ —Ö–µ–Ω–¥–ª–µ—Ä–∏ /add, /list, /done —â–æ–± –ø—Ä–∞—Ü—é–≤–∞–ª–∏ —á–µ—Ä–µ–∑ gspread –∑ Google Sheets.",
          chat: "chat2",
        },
        {
          id: "backend-sheets-test",
          title: "–ü–µ—Ä–µ–≤—ñ—Ä /add",
          desc: "–î–æ–¥–∞–π –∑–∞–ø–∏—Å —ñ –ø–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è, —â–æ –∑'—è–≤–∏–≤—Å—è —Ä—è–¥–æ–∫ —É —Ç–∞–±–ª–∏—Ü—ñ.",
          prompt:
            "Manual test: –Ω–∞–¥—ñ—à–ª–∏ /add, –ø–µ—Ä–µ–≤—ñ—Ä —â–æ –≤ Google Sheets –¥–æ–¥–∞–≤—Å—è —Ä—è–¥–æ–∫.",
        },
      ],
    },
    postgres: {
      title: "Postgres (Docker)",
      desc: "–ü–æ—Ç—É–∂–Ω–∞ –±–∞–∑–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥–∏",
      steps: [
        {
          id: "backend-postgres-docker",
          title: "Docker Compose",
          desc: "–ü—ñ–¥–≥–æ—Ç—É–π docker-compose.yml –∑ Postgres.",
          prompt:
            "Task: —Å—Ç–≤–æ—Ä–∏ docker-compose.yml –∑ Postgres 15, user=bot, password=botpass, db=botdb. –ü–æ—Ä—Ç 5432.",
        },
        {
          id: "backend-postgres-up",
          title: "–ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞",
          desc: "–ó–∞–ø—É—Å—Ç–∏ docker compose up -d.",
          prompt: "Command: docker compose up -d",
        },
        {
          id: "backend-postgres-deps",
          title: "–î–æ–¥–∞–π –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ",
          desc: "–í—Å—Ç–∞–Ω–æ–≤–∏ psycopg2-binary.",
          prompt: "Command: pip install psycopg2-binary",
        },
        {
          id: "backend-postgres-code",
          title: "–ü—ñ–¥–∫–ª—é—á–∏—Å—è –¥–æ –±–∞–∑–∏",
          desc: "–ù–∞–ª–∞—à—Ç—É–π —Å—Ö–µ–º—É —Ç–∞ CRUD.",
          prompt:
            "Task: –¥–æ–¥–∞–π PostgresRepository (async) –∑ –º–µ—Ç–æ–¥–∞–º–∏ add_task, list_tasks, complete_task. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π asyncpg.",
          chat: "chat2",
        },
        {
          id: "backend-postgres-test",
          title: "–ü–µ—Ä–µ–≤—ñ—Ä /add",
          desc: "–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è, —â–æ –∑–∞–ø–∏—Å –ø–æ—Ç—Ä–∞–ø–ª—è—î —É –±–∞–∑—É.",
          prompt:
            "Manual test: –Ω–∞–¥—ñ—à–ª–∏ /add, –ø–µ—Ä–µ–≤—ñ—Ä SELECT * FROM tasks;",
        },
      ],
    },
  };

  const addonOptions = {
    design: {
      title: "–î–∏–∑–∞–π–Ω",
      desc: "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é, –∫–Ω–æ–ø–∫–∏, —Ç–µ–∫—Å—Ç–∏ –∑ –µ–º–æ–¥–∑—ñ",
      steps: [
        {
          id: "addon-design-menu",
          title: "–î–æ–¥–∞–π –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é",
          prompt: "Task: –¥–æ–¥–∞–π ReplyKeyboardMarkup –∑ –∫–Ω–æ–ø–∫–∞–º–∏ üìã –ó–∞–≤–¥–∞–Ω–Ω—è, üß† –ü–æ—Ä–∞–¥–∏, ‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.",
        },
        {
          id: "addon-design-inline",
          title: "Inline-–∫–Ω–æ–ø–∫–∏",
          prompt:
            "Task: –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ '–ó–∞–≤–¥–∞–Ω–Ω—è' –¥–æ–¥–∞–π inline-–∫–Ω–æ–ø–∫–∏ [‚úÖ –ì–æ—Ç–æ–≤–æ] [‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏] [üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞].",
        },
        {
          id: "addon-design-copy",
          title: "–î—Ä—É–∂–Ω—ñ —Ç–µ–∫—Å—Ç–∏",
          prompt:
            "Task: –æ–Ω–æ–≤–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –±–æ—Ç–∞ –∑ –µ–º–æ–¥–∑—ñ —Ç–∞ –ø—ñ–¥–±–∞–¥—å–æ—Ä—é—é—á–∏–º–∏ —Ñ—Ä–∞–∑–∞–º–∏.",
        },
      ],
    },
    stats: {
      title: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
      desc: "–ö–æ–º–∞–Ω–¥–∞ /stats —Ç–∞ —â–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç",
      steps: [
        {
          id: "addon-stats-command",
          title: "–ö–æ–º–∞–Ω–¥–∞ /stats",
          prompt:
            "Task: –¥–æ–¥–∞–π –∫–æ–º–∞–Ω–¥—É /stats. –ü–æ–∫–∞–∑—É–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –¥–µ–Ω—å, —Ç–∏–∂–¥–µ–Ω—å, –≤—Å—å–æ–≥–æ.",
          chat: "chat2",
        },
        {
          id: "addon-stats-report",
          title: "–ö—Ä–∞—Å–∏–≤–∏–π –∑–≤—ñ—Ç",
          prompt:
            "Task: –æ–Ω–æ–≤–∏ /stats, —â–æ–± –ø–æ–∫–∞–∑—É–≤–∞–≤ –ø—Ä–æ–≥—Ä–µ—Å –∑ –µ–º–æ–¥–∑—ñ —Ç–∞ –≤—ñ–¥—Å–æ—Ç–∫–∞–º–∏.",
        },
        {
          id: "addon-stats-reminder",
          title: "–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è",
          prompt:
            "Task: –¥–æ–¥–∞–π —â–æ–¥–µ–Ω–Ω–∏–π –Ω–∞–≥–∞–¥—É–≤–∞–ª—å–Ω–∏–π job –Ω–∞ 20:00 –∑ –∫–æ—Ä–æ—Ç–∫–∏–º –∑–≤—ñ—Ç–æ–º.",
        },
      ],
    },
    payments: {
      title: "–û–ø–ª–∞—Ç–∏",
      desc: "Stripe –∞–±–æ WayForPay",
      steps: [
        {
          id: "addon-payments-choice",
          title: "–û–±–µ—Ä–∏ —Å–∏—Å—Ç–µ–º—É –æ–ø–ª–∞—Ç–∏",
          render(container, ctx) {
            const list = document.createElement("div");
            list.className = "card-grid";
            [
              { key: "stripe", title: "Stripe", desc: "–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ USD —Ç–∞ —ñ–Ω—à–∏—Ö –≤–∞–ª—é—Ç." },
              { key: "wayforpay", title: "WayForPay", desc: "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –ø–ª–∞—Ç—ñ–∂–∫–∞ –≤ –≥—Ä–∏–≤–Ω—ñ." },
            ].forEach((option) => {
              const card = document.createElement("button");
              card.type = "button";
              card.className = "select-card";
              if (state.payments?.provider === option.key) card.classList.add("active");
              card.dataset.value = option.key;
              card.innerHTML = `<strong>${option.title}</strong><span>${option.desc}</span>`;
              card.addEventListener("click", () => {
                updateState((draft) => {
                  draft.payments.provider = option.key;
                });
                ctx.markComplete();
              });
              list.appendChild(card);
            });
            container.appendChild(list);
          },
        },
        {
          id: "addon-payments-keys",
          title: "–ü—ñ–¥–≥–æ—Ç—É–π –∫–ª—é—á—ñ",
          render(container) {
            renderList(container, [
              "–ó–∞—Ä–µ—î—Å—Ç—Ä—É–π—Å—è –Ω–∞ stripe.com –∞–±–æ wayforpay.com.",
              "–î–æ–¥–∞–π —É .env –∑–º—ñ–Ω–Ω—ñ STRIPE_KEY –∞–±–æ WAYFORPAY_KEY.",
            ]);
          },
        },
        {
          id: "addon-payments-command",
          title: "–ö–æ–º–∞–Ω–¥–∞ /buy",
          prompt:
            "Task: –¥–æ–¥–∞–π –∫–æ–º–∞–Ω–¥—É /buy. –î–ª—è Stripe ‚Äî Checkout Session. –î–ª—è WayForPay ‚Äî –ø–ª–∞—Ç—ñ–∂–Ω–∞ —Ñ–æ—Ä–º–∞. –ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –Ω–∞–¥—ñ—à–ª–∏ '–î—è–∫—É—é –∑–∞ –æ–ø–ª–∞—Ç—É!'.",
          chat: "chat2",
        },
        {
          id: "addon-payments-success",
          title: "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö",
          prompt:
            "Task: –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó –æ–ø–ª–∞—Ç–∏ –ø–æ–∑–Ω–∞—á –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —è–∫ premium —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –µ–º–æ–¥–∑—ñ.",
        },
      ],
    },
  };

  const milestoneToasts = [
    { threshold: 15, message: "–î–æ–±—Ä–∏–π —Å—Ç–∞—Ä—Ç. –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ." },
    { threshold: 30, message: "–Ñ –ø—Ä–æ–≥—Ä–µ—Å. –ù–∞—Å—Ç—É–ø–Ω–∏–π –∫—Ä–æ–∫ –ø—Ä–æ—Å—Ç–∏–π." },
    { threshold: 50, message: "–ü–æ–ª–æ–≤–∏–Ω–∞ –≥–æ—Ç–æ–≤–∞." },
    { threshold: 75, message: "–§—ñ–Ω—ñ—à –±–ª–∏–∑—å–∫–æ." },
    { threshold: 100, message: "–ì–æ—Ç–æ–≤–æ. –û–±–µ—Ä–∏ –∞–ø“ë—Ä–µ–π–¥." },
  ];

  const steps = buildSteps();

  attachEventListeners();
  applyTheme();
  render();

  function buildSteps() {
    const stepList = [];

    function addStep(step) {
      stepList.push(step);
    }

    const startSection = "–ï—Ç–∞–ø 1 ¬∑ –°—Ç–∞—Ä—Ç";
    addStep({
      id: "1.1",
      section: startSection,
      icon: "guide",
      title: "–ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è",
      desc: "–ó–∞–ø—É—Å–∫–∞—î–º–æ –º–∞–π—Å—Ç–µ—Ä —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–ª–∞—Å–Ω–æ–≥–æ Telegram-–±–æ—Ç–∞.",
      tags: ["guide"],
      onComplete(draft) {
        draft.started = true;
      },
      render(container, ctx) {
        renderList(container, [
          "–©–æ —Ä–æ–±–∏–º–æ: –∑–∞–ø—É—Å–∫–∞—î–º–æ –º–∞–π—Å—Ç–µ—Ä —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–ª–∞—Å–Ω–æ–≥–æ Telegram-–±–æ—Ç–∞.",
          "–î—ñ—è: –Ω–∞—Ç–∏—Å–Ω–∏ ¬´–ü–æ—á–∞—Ç–∏¬ª.",
        ]);

        const action = document.createElement("button");
        action.type = "button";
        action.className = "btn primary";
        action.textContent = "–ü–æ—á–∞—Ç–∏";
        action.addEventListener("click", () => {
          ctx.markComplete();
        });
        container.appendChild(action);

        const hint = document.createElement("p");
        hint.className = "hint";
        hint.textContent = "–Ø–∫—â–æ –ø–µ—Ä–µ–¥—É–º–∞—î—à ‚Äî –∑–∞–≤–∂–¥–∏ –º–æ–∂–Ω–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ —Ü—å–æ–≥–æ –∫—Ä–æ–∫—É.";
        container.appendChild(hint);
      },
    });

    addStep({
      id: "1.2",
      section: startSection,
      icon: "guide",
      title: "–í–∏–±—ñ—Ä —Ç–∏–ø—É –±–æ—Ç–∞",
      desc: "–û–±–µ—Ä—ñ—Ç—å, —â–æ —Å–∞–º–µ —Ö–æ—á–µ—à –∑—Ä–æ–±–∏—Ç–∏. –°–∏—Å—Ç–µ–º–∞ –ø—ñ–¥—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ.",
      tags: ["guide"],
      when(state) {
        return state.started;
      },
      render(container, ctx) {
        const intro = document.createElement("p");
        intro.className = "step-note";
        intro.textContent = "–í–∏–±–µ—Ä–∏ —Å—Ü–µ–Ω–∞—Ä—ñ–π –Ω–∏–∂—á–µ ‚Äî –∫–æ–º–∞–Ω–¥–∏ –ø—ñ–¥—Ç—è–≥–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–∞–ª—å—à–∏—Ö –ø—Ä–æ–º–ø—Ç–∞—Ö.";
        container.appendChild(intro);

        const grid = document.createElement("div");
        grid.className = "card-grid";
        Object.entries(botTypes).forEach(([key, info]) => {
          const card = document.createElement("button");
          card.type = "button";
          card.className = "select-card";
          card.dataset.value = key;
          const commands = info.commands
            .split(",")
            .map((cmd) => cmd.trim())
            .filter(Boolean)
            .join(", ");
          card.innerHTML = `<strong>${info.title}</strong><span>${info.desc}</span><span class="card-commands">${commands}</span>`;
          if (state.botType === key) card.classList.add("active");
          card.addEventListener("click", () => {
            updateState((draft) => {
              draft.botType = key;
              draft.ack["commands"] = info.commands;
            });
            ctx.markComplete();
          });
          grid.appendChild(card);
        });
        container.appendChild(grid);
        const hint = document.createElement("p");
        hint.className = "hint";
        hint.innerHTML = "<strong>–ü–æ—è—Å–Ω–µ–Ω–Ω—è:</strong> –ö–æ–º–∞–Ω–¥–∞ ‚Äî —Ü–µ —Å–ª–æ–≤–æ –∑ –∫–æ—Å–æ—é —Ä–∏—Å–∫–æ—é, —è–∫–µ —Ç–∏ –ø–∏—à–µ—à –±–æ—Ç—É, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ <code>/start</code>.";
        container.appendChild(hint);
      },
    });

    addStep({
      id: "1.3",
      section: startSection,
      icon: "guide",
      title: "–í–∏–±—ñ—Ä —Ä–µ–∂–∏–º—É –®–Ü",
      desc: "–û–±–µ—Ä–∏ —Ä–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏ –∑—ñ —à—Ç—É—á–Ω–∏–º —ñ–Ω—Ç–µ–ª–µ–∫—Ç–æ–º.",
      tags: ["guide"],
      when(state) {
        return state.botType !== "";
      },
      render(container, ctx) {
        const list = document.createElement("ul");
        list.className = "step-options";
        list.innerHTML = `
          <li><strong>ChatGPT-only</strong> ‚Äî –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ, –∞–ª–µ –∫–æ–¥ –∫–æ–ø—ñ—é—î—à –≤—Ä—É—á–Ω—É.</li>
          <li><strong>ChatGPT + Codex (Copilot)</strong> ‚Äî —à–≤–∏–¥—à–µ —ñ —á–∏—Å—Ç—ñ—à–µ, –∞–ª–µ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ Copilot.</li>
        `;
        container.appendChild(list);

        const note = document.createElement("p");
        note.className = "step-note";
      icon: "guide",
      title: "–í–∏–±—ñ—Ä —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞",
      desc: "–ü—Ä–∞—Ü—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–æ –∞–±–æ –≤ –±—Ä–∞—É–∑–µ—Ä—ñ —á–µ—Ä–µ–∑ Codespaces.",
      tags: ["env"],
      when(state) {
        return state.mode !== "";
      },
      render(container, ctx) {
        const options = [
          { key: "local", title: "Local", desc: "Python + —Ä–µ–¥–∞–∫—Ç–æ—Ä –Ω–∞ —Ç–≤–æ—î–º—É –ü–ö." },
          { key: "codespaces", title: "Codespaces", desc: "–£—Å–µ –≤ –±—Ä–∞—É–∑–µ—Ä—ñ. –ü–æ—Ç—Ä—ñ–±–µ–Ω GitHub." },
        ];
        renderSelectionCards(container, options, state.environment, (value) => {
          updateState((draft) => {
            draft.environment = value;
          });
          ctx.markComplete();
        });
      },
    });

    addStep({
      id: "1.5",
      section: startSection,
      icon: "check",
      title: "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤",
      desc: "–ü–æ—Å—Ç–∞–≤ –≥–∞–ª–æ—á–∫–∏, —â–æ –≤—Å–µ –≥–æ—Ç–æ–≤–æ –¥–æ —Ä–æ–±–æ—Ç–∏.",
      tags: ["guide"],
      when(state) {
        return state.environment !== "";
      },
      render(container, ctx) {
        const checklist = document.createElement("div");
        checklist.className = "checklist-grid";
        [
          { key: "python", label: "Python 3.10+ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ" },
          { key: "editor", label: "–†–µ–¥–∞–∫—Ç–æ—Ä –≤—ñ–¥–∫—Ä–∏–≤–∞—î—Ç—å—Å—è (VS Code / Cursor)" },
          { key: "github", label: "–Ñ –æ–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å GitHub" },
          { key: "copilot", label: "Copilot –∞–∫—Ç–∏–≤–Ω–∏–π (–¥–ª—è Codex —Ä–µ–∂–∏–º—É)", when: (s) => s.mode === "codex" },
        ]
          .filter((item) => (item.when ? item.when(state) : true))
          .forEach((item) => {
            const row = document.createElement("label");
            row.className = "check-item";
            const input = document.createElement("input");
            input.type = "checkbox";
            input.checked = Boolean(state.ack[`check-${item.key}`]);
            input.addEventListener("change", () => {
              updateState((draft) => {
                draft.ack[`check-${item.key}`] = input.checked;
              });
              if ([...checklist.querySelectorAll("input")].every((node) => node.checked)) {
                ctx.markComplete();
              }
            });
            const span = document.createElement("span");
            span.textContent = item.label;
            row.append(input, span);
            checklist.appendChild(row);
          });
        container.appendChild(checklist);
      },
    });

    addStep({
      id: "1.6",
      section: startSection,
      icon: "file",
      title: "DEV BRIEF",
      desc: "–ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å –ø—Ä–æ–µ–∫—Ç—É –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è.",
      tags: ["chat1"],
      when(state) {
        return state.environment !== "";
      },
      promptProvider() {
        const type = botTypes[state.botType] || botTypes.custom;
        const commands = (state.ack["commands"] || type.commands || "")
          .split(",")
          .filter(Boolean)
          .join(", ");
        return [
          "## DEV BRIEF",
          `–¢–∏–ø –±–æ—Ç–∞: ${type.title}`,
          `–ö–æ–º–∞–Ω–¥–∏: ${commands}`,
          `–†–µ–∂–∏–º: ${state.mode === "codex" ? "ChatGPT + Codex" : "ChatGPT-only"}`,
          `–°–µ—Ä–µ–¥–æ–≤–∏—â–µ: ${state.environment === "codespaces" ? "Codespaces (–±—Ä–∞—É–∑–µ—Ä)" : "Local (—Ç–≤—ñ–π –∫–æ–º–ø'—é—Ç–µ—Ä)"}`,
          "–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è: JSON –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º",
          "–°—Ç–∏–ª—å: –¥—Ä—É–∂–Ω—ñ —Ç–µ–∫—Å—Ç–∏ –∑ –µ–º–æ–¥–∑—ñ",
          "–¶—ñ–ª—å: —Å—Ç–≤–æ—Ä–∏—Ç–∏ Telegram-–±–æ—Ç–∞ –∑–∞ –ø–æ–∫—Ä–æ–∫–æ–≤–æ—é —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—î—é",
        ].join("\n");
      },
      render(container) {
        renderList(container, [
          "–°–∫–æ–ø—ñ—é–π DEV BRIEF –≤ ChatGPT (–∞–±–æ Cursor).",
          "–°–∫–∞–∂–∏, —â–æ —Ö–æ—á–µ—à —Å—Ç–≤–æ—Ä–∏—Ç–∏ –±–æ—Ç–∞ –∑–∞ –ø–æ–∫—Ä–æ–∫–æ–≤–∏–º –ø–ª–∞–Ω–æ–º.",
        ]);
      },
    });

    addStep({
      id: "1.7",
      section: startSection,
      icon: "guide",
      title: "–ü—Ä–æ–º–ø—Ç –¥–ª—è –∫–æ–¥—É",
      desc: "–ó–≥–µ–Ω–µ—Ä—É—î–º–æ –∫–æ–¥ —ñ –≤—Å—Ç–∞–≤–∏–º–æ –≤ main.py.",
      tags: ["chat2"],
      when(state) {
        return Boolean(state.ack["1.6"]);
      },
      promptProvider() {
        const type = botTypes[state.botType] || botTypes.custom;
        const commandBlock = makeCommandBlock(state);
        return [
          "## Cursor Prompt",
          `–¶—ñ–ª—å: —Å—Ç–≤–æ—Ä–∏—Ç–∏ Telegram-–±–æ—Ç–∞ —Ç–∏–ø—É ${type.title}`,
          "–ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞: aiogram 3",
          "–ö–æ–º–∞–Ω–¥–∏:",
          commandBlock,
          "",
          "–°—Ç–≤–æ—Ä–∏ —Ñ–∞–π–ª main.py –∑ –æ–±—Ä–æ–±–Ω–∏–∫–∞–º–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥ –≤–∏—â–µ.",
          "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π –¥—Ä—É–∂–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –µ–º–æ–¥–∑—ñ.",
          "–î–∞–Ω—ñ –ø–æ–∫–∏ —â–æ –∑–±–µ—Ä—ñ–≥–∞–π —É –ø–∞–º'—è—Ç—ñ.",
        ].join("\n");
      },
      render(container) {
        renderList(container, [
          "–ù–∞—Ç–∏—Å–Ω–∏ ¬´–°–∫–æ–ø—ñ—é–≤–∞—Ç–∏¬ª —ñ –≤—Å—Ç–∞–≤ —É ChatGPT/Cursor.",
          "–û—Ç—Ä–∏–º–∞–Ω–∏–π –∫–æ–¥ –∑–±–µ—Ä–µ–∂–∏ —É main.py.",
          "–ü–æ–≤–µ—Ä–Ω–∏—Å—å —Å—é–¥–∏ —ñ –ø–æ–∑–Ω–∞—á –∫—Ä–æ–∫ –≤–∏–∫–æ–Ω–∞–Ω–∏–º.",
        ]);
      },
    });

    const backendSection = "–ï—Ç–∞–ø 2 ¬∑ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö";
    addStep({
      id: "2.1",
      section: backendSection,
      icon: "guide",
      title: "–í–∏–±—ñ—Ä –±–µ–∫–µ–Ω–¥—É",
      desc: "–û–±–µ—Ä–µ–º–æ, –¥–µ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –¥–∞–Ω—ñ –±–æ—Ç–∞.",
      when(state) {
        return Boolean(state.ack["1.7"]);
      },
      render(container, ctx) {
        const options = [
          { key: "json", title: "JSON —Ñ–∞–π–ª", desc: "–ù–∞–π–ø—Ä–æ—Å—Ç—ñ—à–µ. –î–∞–Ω—ñ —É —Ñ–∞–π–ª—ñ." },
          { key: "sqlite", title: "SQLite", desc: "–ë–∞–∑–∞ —É —Ñ–∞–π–ª—ñ. –•–æ—Ä–æ—à–∞ –¥–ª—è –Ω–µ–≤–µ–ª–∏–∫–∏—Ö –ø—Ä–æ–µ–∫—Ç—ñ–≤." },
          { key: "googlesheets", title: "Google Sheets", desc: "–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ —Ç–∞–±–ª–∏—Ü—é –æ–Ω–ª–∞–π–Ω." },
          { key: "postgres", title: "Postgres (Docker)", desc: "–î–ª—è –∫–æ–º–∞–Ω–¥–∏ –∞–±–æ –±—ñ–∑–Ω–µ—Å—É." },
        ];
        renderSelectionCards(container, options, state.backend, (value) => {
          updateState((draft) => {
            draft.backend = value;
          });
          ctx.markComplete();
        });
      },
    });

    addStep({
      id: "2.2",
      section: backendSection,
      icon: "guide",
      title: "–ö—Ä–æ–∫–∏ –¥–ª—è –±–µ–∫–µ–Ω–¥—É",
      desc: "–í–∏–∫–æ–Ω–∞–π —É—Å—ñ –ø—ñ–¥–∫—Ä–æ–∫–∏ –Ω–∏–∂—á–µ.",
      when(state) {
        return Boolean(state.backend);
      },
      render(container) {
        const chosen = backendOptions[state.backend];
        if (!chosen) {
          container.textContent = "–û–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç –±–µ–∫–µ–Ω–¥—É –≤–∏—â–µ.";
          return;
        }
        const list = document.createElement("ol");
        list.className = "instructions-list";
        chosen.steps.forEach((step) => {
          const li = document.createElement("li");
          li.textContent = step.title;
          list.appendChild(li);
        });
        container.appendChild(list);

        const hint = document.createElement("p");
        hint.className = "hint";
        hint.textContent = "–ù–∞—Ç–∏—Å–Ω–∏ –Ω–∞ –±—É–¥—å-—è–∫–∏–π –∫—Ä–æ–∫ –ª—ñ–≤–æ—Ä—É—á, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó.";
        container.appendChild(hint);
      },
    });

    Object.entries(backendOptions).forEach(([key, option]) => {
      option.steps.forEach((subStep, index) => {
        addStep({
          id: `2.${index + 3}.${key}`,
          section: backendSection,
          icon: "file",
          title: subStep.title,
          desc: subStep.desc || "",
          tags: subStep.chat ? [subStep.chat] : undefined,
          list.appendChild(li);
        });
        container.appendChild(list);

        const hint = document.createElement("p");
        hint.className = "hint";
        hint.textContent = "–ù–∞—Ç–∏—Å–Ω–∏ –Ω–∞ –±—É–¥—å-—è–∫–∏–π –∫—Ä–æ–∫ –ª—ñ–≤–æ—Ä—É—á, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó.";
        container.appendChild(hint);
      },
    });

    Object.entries(backendOptions).forEach(([key, option]) => {
      option.steps.forEach((subStep, index) => {
        addStep({
          id: `2.${index + 3}.${key}`,
          section: backendSection,
          icon: "file",
          title: subStep.title,
          desc: subStep.desc || "",
          tags: subStep.chat ? [subStep.chat] : undefined,
          when(state) {
            return state.backend === key;
          },
          prompt: subStep.prompt,
          link: subStep.link,
          onComplete: subStep.onComplete,
          render(container) {
            if (subStep.render) {
              subStep.render(container);
            } else if (subStep.prompt) {
              renderList(container, ["–°–∫–æ–ø—ñ—é–π –ø—Ä–æ–º–ø—Ç –Ω–∏–∂—á–µ —ñ –≤–∏–∫–æ–Ω–∞–π —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó."]);
            } else {
              renderList(container, ["–í–∏–∫–æ–Ω–∞–π –¥—ñ—é, –æ–ø–∏—Å–∞–Ω—É –≤ —Ç–µ–∫—Å—Ç—ñ."]);
            }
          },
        });
      });
    });

    const designSection = "–ï—Ç–∞–ø 3 ¬∑ –î–∏–∑–∞–π–Ω";
    addStep({
      id: "3
