(function () {
  const STORAGE_KEY = "ztb_state_v1";
  const THEME_STORAGE_KEY = "ztb_theme_manual";
  const NOTES_HISTORY_LIMIT = 50;

  const panel = document.getElementById("ztb-panel");
  const mainTitle = document.getElementById("ztb-title");
  const stepHeading = document.getElementById("ztb-step-heading");
  const descEl = document.getElementById("ztb-desc");
  const tagsEl = document.getElementById("ztb-tags");
  const statusEl = document.getElementById("ztb-status");
  const promptEl = document.getElementById("ztb-prompt");
  const noteEl = document.getElementById("ztb-note");
  const contentEl = document.getElementById("ztb-content");
  const sectionsEl = document.getElementById("ztb-sections");
  const searchEl = document.getElementById("ztb-search");
  const progressFill = document.getElementById("ztb-progress-fill");
  const progressText = document.getElementById("ztb-progress-text");
  const toastEl = document.getElementById("ztb-toast");
  const backdrop = document.getElementById("ztb-backdrop");

  const helpModal = document.getElementById("ztb-modal-help");
  const troublesModal = document.getElementById("ztb-modal-troubles");
  const tokenModal = document.getElementById("ztb-modal-token");
  const tourModal = document.getElementById("ztb-modal-tour");
  const tourOverlay = document.getElementById("ztb-tour-overlay");
  const tourTooltip = document.getElementById("ztb-tour-tooltip");
  const tourText = document.getElementById("tour-text");

  const quickActions = document.getElementById("ztb-quick-actions");

  const defaultState = {
    started: false,
    currentStep: 0,
    botType: "",
    mode: "",
    environment: "",
    backend: "",
    addons: { design: false, stats: false, payments: false },
    payments: { provider: "" },
    notes: {},
    ack: {},
  };

  const clone = (value) =>
    typeof structuredClone === "function" ? structuredClone(value) : JSON.parse(JSON.stringify(value));

  let state = loadState();
  let uiState = {
    sectionsOpen: {},
    search: "",
    tourIndex: 0,
    tourActive: false,
    lastMilestone: 0,
  };
    tourActive: false,
    lastMilestone: 0,
  };

  const botTypes = {
    crm: {
      title: "CRM",
      desc: "–í–µ–¥–µ –∫–ª—ñ—î–Ω—Ç—ñ–≤ —ñ –∑–∞–≤–¥–∞–Ω–Ω—è",
      commands: "/start,/help,/add,/clients,/tasks,/done,/stats",
    },
    task: {
      title: "Task Manager",
      desc: "–°–ø–∏—Å–æ–∫ —Å–ø—Ä–∞–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥–∏",
      commands: "/start,/help,/add,/list,/done,/skip,/stats",
    },
    habit: {
      title: "Habit Tracker",
      desc: "–©–æ–¥–µ–Ω–Ω—ñ –∑–≤–∏—á–∫–∏ –π –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è",
      commands: "/start,/help,/add,/habits,/done,/streak,/plan,/stats",
    },
    faq: {
      title: "FAQ / Support",
      desc: "–í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –Ω–∞ —Ç–∏–ø–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è",
      commands: "/start,/help,/faq,/contact,/tips",
    },
    shop: {
      title: "Shop",
      desc: "–ú—ñ–Ω—ñ-–º–∞–≥–∞–∑–∏–Ω —É Telegram",
      commands: "/start,/help,/catalog,/buy,/cart,/pay,/support",
    },
    booking: {
      title: "Booking",
      desc: "–ó–∞–ø–∏—Å –Ω–∞ –ø–æ—Å–ª—É–≥–∏",
      commands: "/start,/help,/book,/slots,/cancel,/contact",
    },
    custom: {
      title: "Custom",
      desc: "–°–≤—ñ–π —Å—Ü–µ–Ω–∞—Ä—ñ–π",
      commands: "/start,/help",
    },
  };

  const commandDescriptions = {
    "/start": "–ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É",
    "/help": "–ü–æ—è—Å–Ω–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥",
    "/add": "–î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å",
    "/clients": "–°–ø–∏—Å–æ–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤",
    "/tasks": "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á",
    "/done": "–ü–æ–∑–Ω–∞—á–∏—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω–µ",
    "/stats": "–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
    "/list": "–ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫",
    "/skip": "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —ñ–∑ –ø–æ—è—Å–Ω–µ–Ω–Ω—è–º",
    "/habits": "–°–ø–∏—Å–æ–∫ –∑–≤–∏—á–æ–∫",
    "/streak": "–ü—Ä–æ–≥—Ä–µ—Å —Å–µ—Ä—ñ—ó",
    "/plan": "–ü–ª–∞–Ω –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å",
    "/faq": "–ü–æ–ø—É–ª—è—Ä–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è",
    "/contact": "–ó–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –ª—é–¥–∏–Ω–æ—é",
    "/tips": "–ö–æ—Ä–∏—Å–Ω—ñ –ø—ñ–¥–∫–∞–∑–∫–∏",
    "/catalog": "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–æ–≤–∞—Ä–∏",
    "/buy": "–°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
    "/cart": "–ü–æ–∫–∞–∑–∞—Ç–∏ –∫–æ—à–∏–∫",
    "/pay": "–û–ø–ª–∞—Ç–∞",
    "/support": "–ü—ñ–¥—Ç—Ä–∏–º–∫–∞",
    "/book": "–ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —Å–ª–æ—Ç",
    "/slots": "–í—ñ–ª—å–Ω—ñ —á–∞—Å–∏",
    "/cancel": "–°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å",
  };

  const iconLabels = {
    guide: { label: "guide", icon: "üìò" },
    file: { label: "file", icon: "üìÑ" },
    chatgpt: { label: "chatgpt", icon: "üí¨" },
    cursor: { label: "cursor", icon: "üíª" },
    terminal: { label: "terminal", icon: "‚å®Ô∏è" },
    telegram: { label: "telegram", icon: "‚úâÔ∏è" },
    check: { label: "check", icon: "‚úÖ" },
    env: { label: "env", icon: "üõ†Ô∏è" },
  };

  const backendOptions = {
    json: {
      title: "JSON —Ñ–∞–π–ª",
      desc: "–ü—Ä–æ—Å—Ç–∏–π —Ñ–∞–π–ª data/db.json",
      steps: [
        {
          id: "backend-json-file",
          title: "–°—Ç–≤–æ—Ä–∏ data/db.json",
          desc: "–°—Ç–≤–æ—Ä–∏ –ø–∞–ø–∫—É data —Ç–∞ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ñ–∞–π–ª db.json ‚Äî —Ü–µ —Ç–≤–æ—è –±–∞–∑–∞.",
          prompt:
            "–°—Ç–≤–æ—Ä–∏ —É –ø—Ä–æ–µ–∫—Ç—ñ –ø–∞–ø–∫—É data (—è–∫—â–æ —ó—ó –Ω–µ–º–∞—î) —Ç–∞ –¥–æ–¥–∞–π –ø–æ—Ä–æ–∂–Ω—ñ–π —Ñ–∞–π–ª db.json. –í—ñ–Ω –∑–±–µ—Ä—ñ–≥–∞—Ç–∏–º–µ –¥–∞–Ω—ñ –±–æ—Ç–∞.",
        },
        {
          id: "backend-json-code",
          title: "–î–æ–¥–∞–π —Ñ—É–Ω–∫—Ü—ñ—ó —á–∏—Ç–∞–Ω–Ω—è/–∑–∞–ø–∏—Å—É",
          desc: "–ü–æ–ø—Ä–æ—Å–∏ –®–Ü –¥–æ–¥–∞—Ç–∏ load_json() —ñ save_json().",
          prompt:
            "Task: add helper functions load_json_data() and save_json_data(path='data/db.json') that safely read/write JSON. Handle –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —Ñ–∞–π–ª—É —ñ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ñ–∞–π–ª.",
          id: "backend-json-wire",
          title: "–ü—ñ–¥–∫–ª—é—á–∏ –∫–æ–º–∞–Ω–¥–∏",
          desc: "–ó—Ä–æ–±–∏, —â–æ–± /add, /list, /done –ø—Ä–∞—Ü—é–≤–∞–ª–∏ –∑ –Ω–æ–≤–∏–º —Ñ–∞–π–ª–æ–º.",
          prompt:
            "Task: update command handlers so /add writes to data/db.json, /list —á–∏—Ç–∞—î –∑–∞–ø–∏—Å–∏, –∞ /done –æ–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ load_json_data/save_json_data.",
          chat: "chat2",
        },
        {
          id: "backend-json-test",
          title: "–ü–µ—Ä–µ–≤—ñ—Ä /add",
          desc: "–ó–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞ —Ç–∞ –ø–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è, —â–æ —Ñ–∞–π–ª –æ–Ω–æ–≤–∏–≤—Å—è.",
          prompt:
            "Manual test: activate venv, run python main.py, –Ω–∞–¥—ñ—à–ª–∏ /add —ñ –ø–µ—Ä–µ–≤—ñ—Ä, —â–æ —É data/db.json –∑'—è–≤–∏–≤—Å—è –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å.",
        },
      ],
    },
    sqlite: {
      title: "SQLite",
      desc: "–ë–∞–∑–∞ —É —Ñ–∞–π–ª—ñ db.sqlite3",
      steps: [
        {
          id: "backend-sqlite-file",
          title: "–ü—ñ–¥–≥–æ—Ç—É–π—Ç–µ db.sqlite3",
          desc: "–ù–∞–ª–∞—à—Ç—É–π —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –±–∞–∑–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ.",
          prompt:
            "Task: add init_db() that —Å—Ç–≤–æ—Ä—é—î —Ñ–∞–π–ª db.sqlite3 —Ç–∞ —Ç–∞–±–ª–∏—Ü—é tasks (id INTEGER PRIMARY KEY, name TEXT, status TEXT, created_at TIMESTAMP). –í–∏–∫–ª–∏—á–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É.",
          chat: "chat2",
        },
        {
          id: "backend-sqlite-crud",
          title: "CRUD-—Ñ—É–Ω–∫—Ü—ñ—ó",
          desc: "–ü–æ–ø—Ä–æ—Å–∏ –®–Ü –¥–æ–¥–∞—Ç–∏ aiosqlite-—Ö–µ–ª–ø–µ—Ä–∏.",
          prompt:
            "Task: implement async add_task(), list_tasks(), update_task_status() using aiosqlite –∑ db.sqlite3.",
          chat: "chat2",
        },
        {
          id: "backend-sqlite-wire",
          title: "–ó'—î–¥–Ω–∞–π –∫–æ–º–∞–Ω–¥–∏",
          desc: "–ü—ñ–¥–∫–ª—é—á–∏ /add, /list, /done –¥–æ SQLite.",
          prompt:
            "Task: update command handlers —â–æ–± –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–ª–∏ add_task/list_tasks/update_task_status –∑—ñ SQLite.",
          chat: "chat2",
        },
        {
          id: "backend-sqlite-test",
          title: "–¢–µ—Å—Ç –∑–∞–ø–∏—Å—É",
          desc: "–ó–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞, –¥–æ–¥–∞–π –∑–∞–ø–∏—Å —ñ –ø–µ—Ä–µ–≤—ñ—Ä —Ç–∞–±–ª–∏—Ü—é.",
          prompt:
            "Manual test: run python main.py, –≤–∏–∫–æ–Ω–∞–π /add, –ø–æ—Ç—ñ–º SELECT * FROM tasks; –ø–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è, —â–æ –∑–∞–ø–∏—Å –∑'—è–≤–∏–≤—Å—è.",
        },
      ],
    },
    sheets: {
      title: "Google Sheets",
      desc: "–û–Ω–ª–∞–π–Ω-—Ç–∞–±–ª–∏—Ü—è —è–∫ –±–∞–∑–∞",
      steps: [
        {
          id: "backend-sheets-create",
          title: "–°—Ç–≤–æ—Ä–∏ —Ç–∞–±–ª–∏—Ü—é",
          desc: "–°—Ç–≤–æ—Ä–∏ Google Sheet —Ç–∞ –¥–∞–π –¥–æ—Å—Ç—É–ø —Å–µ—Ä–≤—ñ—Å–Ω–æ–º—É –∞–∫–∞—É–Ω—Ç—É.",
          prompt:
            "Describe how to create a Google Sheet, share it with a service account, —ñ –∑–±–µ—Ä–µ–∂–∏ SHEET_ID —É .env.",
        },
        {
          id: "backend-sheets-code",
          title: "–ü—ñ–¥–∫–ª—é—á–∏ gspread",
          desc: "–î–æ–¥–∞–π –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ —Å–µ—Ä–≤—ñ—Å–Ω–∏–π –∞–∫–∞—É–Ω—Ç.",
          prompt:
            "Task: integrate gspread using credentials from .env (SERVICE_ACCOUNT_JSON, SHEET_ID). –ù–∞–ø–∏—à–∏ helpers append_row() —ñ fetch_rows().",
          chat: "chat2",
        },
        {
          id: "backend-sheets-test",
          title: "–¢–µ—Å—Ç –∑–∞–ø–∏—Å—É",
          desc: "–ù–∞–¥—ñ—à–ª–∏ /add —ñ –ø–µ—Ä–µ–≤—ñ—Ä, —â–æ —Ä—è–¥–æ–∫ –∑'—è–≤–∏–≤—Å—è.",
          prompt:
            "Manual test: run bot, call /add, –≤—ñ–¥–∫—Ä–∏–π Google Sheet —ñ –ø–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è —É –Ω–æ–≤–æ–º—É —Ä—è–¥–∫—É. –î–æ–¥–∞–π –ø–æ—Ä–∞–¥–∏ –¥–ª—è –ø–æ–º–∏–ª–æ–∫ –¥–æ—Å—Ç—É–ø—É.",
        },
      ],
    },
    postgres: {
      title: "Postgres (Docker)",
      desc: "–ü–æ—Ç—É–∂–Ω–∞ –±–∞–∑–∞ —É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ",
      steps: [
        {
          id: "backend-postgres-compose",
          title: "docker-compose.yml",
          desc: "–ü–æ–ø—Ä–æ—Å–∏ —Ñ–∞–π–ª —ñ–∑ Postgres-—Å–ª—É–∂–±–æ—é.",
          prompt:
            "Task: create docker-compose.yml –∑ postgres:15, –∑–º—ñ–Ω–Ω–∏–º–∏ POSTGRES_DB, USER, PASSWORD, volume –¥–ª—è –¥–∞–Ω–∏—Ö.",
          chat: "chat2",
        },
        {
          id: "backend-postgres-run",
          title: "–ó–∞–ø—É—Å—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä",
          desc: "–ü–æ—è—Å–Ω–∏, —è–∫ –≤–∏–∫–æ–Ω–∞—Ç–∏ docker compose up -d.",
          prompt:
            "Manual instructions: from project root run docker compose up -d, –ø–µ—Ä–µ–≤—ñ—Ä docker ps, —ñ —è–∫ –∑—É–ø–∏–Ω–∏—Ç–∏ (docker compose down).",
        },
        {
          id: "backend-postgres-connect",
          title: "–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∑ –∫–æ–¥—É",
          desc: "–î–æ–¥–∞–π psycopg2/asyncpg –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è.",
          prompt:
            "Task: load DATABASE_URL —ñ–∑ .env, —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–∞–±–ª–∏—Ü—é tasks, —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ helpers add_task/list_tasks/update_task_status —á–µ—Ä–µ–∑ asyncpg –∞–±–æ psycopg2.",
          chat: "chat2",
        },
        {
          id: "backend-postgres-test",
          title: "–¢–µ—Å—Ç –∑–∞–ø–∏—Å—É",
          desc: "–ü–µ—Ä–µ–≤—ñ—Ä, —â–æ /add –¥–æ–¥–∞—î —Ä—è–¥–æ–∫ —É Postgres.",
          prompt:
            "Manual test: run bot, –≤–∏–∫–æ–Ω–∞–π /add, —á–µ—Ä–µ–∑ psql –∑—Ä–æ–±–∏ SELECT * FROM tasks; –æ–ø–∏—à–∏, —è–∫ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–º–∏–ª–∫–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è.",
        },
      ],
    },
  };

  const addonMicroSteps = {
    design: [
      {
        id: "addon-design-menu",
        title: "–î–æ–¥–∞–π Reply-–º–µ–Ω—é",
        prompt:
          "Task: add reply keyboard –∑ –∫–Ω–æ–ø–∫–∞–º–∏ üìã –ó–∞–≤–¥–∞–Ω–Ω—è, üß† –ü–æ—Ä–∞–¥–∏, ‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è. –ü–æ—è—Å–Ω–∏, –∫—É–¥–∏ –≤—Å—Ç–∞–≤–∏—Ç–∏ –∫–æ–¥.",
        chat: "chat2",
      },
      {
        id: "addon-design-inline",
        title: "Inline-–∫–Ω–æ–ø–∫–∏",
        prompt:
          "Task: –¥–æ–¥–∞–π inline-–∫–Ω–æ–ø–∫–∏ —É —Å–ø–∏—Å–∫—É –∑–∞–≤–¥–∞–Ω—å: ‚úÖ –ì–æ—Ç–æ–≤–æ, ‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏, üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π callback_data —Ç–∞ edit_message_text.",
        chat: "chat2",
      },
      {
        id: "addon-design-tone",
        title: "–î—Ä—É–∂–Ω—ñ —Ç–µ–∫—Å—Ç–∏",
        prompt:
          "Task: –ø–µ—Ä–µ–ø–∏—à–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –±–æ—Ç–∞ —É –¥—Ä—É–∂–Ω—å–æ–º—É —Ç–æ–Ω—ñ –∑ –µ–º–æ–¥–∑—ñ. –î–æ–¥–∞–π –ø—Ä–∏–∫–ª–∞–¥–∏ –¥–ª—è /start —ñ /help.",
      },
    ],
    stats: [
      {
        id: "addon-stats-command",
        title: "–ö–æ–º–∞–Ω–¥–∞ /stats",
        prompt:
          "Task: –¥–æ–¥–∞–π –∫–æ–º–∞–Ω–¥—É /stats, —â–æ –ø–æ–∫–∞–∑—É—î –ø—Ä–æ–≥—Ä–µ—Å –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ, —Ç–∏–∂–¥–µ–Ω—å —ñ –∑–∞–≥–∞–ª–æ–º –∑ –µ–º–æ–¥–∑—ñ.",
        chat: "chat2",
      },
      {
        id: "addon-stats-report",
        title: "–§–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π –∑–≤—ñ—Ç",
        prompt:
          "Task: –ø–æ–±—É–¥—É–π —Ç–µ–∫—Å—Ç–æ–≤–∏–π –∑–≤—ñ—Ç –∑ –≤—ñ–¥—Å–æ—Ç–∫–∞–º–∏ —Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä–æ–º —É —Å–∏–º–≤–æ–ª–∞—Ö. –ü–æ—è—Å–Ω–∏ —Ñ–æ—Ä–º–∞—Ç.",
        chat: "chat2",
      },
      {
        id: "addon-stats-reminder",
        title: "–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è 20:00",
        prompt:
          "Task: –¥–æ–¥–∞–π —â–æ–¥–µ–Ω–Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –æ 20:00 –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –ø—Ä–æ–≥—Ä–µ—Å. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π asyncio.create_task –∞–±–æ APScheduler.",
        chat: "chat2",
      },
    ],
    payments: [
      {
        id: "addon-payments-provider",
        title: "–û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞",
        render(container, ctx) {
          const providers = [
            { key: "stripe", title: "Stripe", desc: "–ö–∞—Ä—Ç–∫–∏ Visa/Mastercard" },
            { key: "wayforpay", title: "WayForPay", desc: "–£–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –ø–ª–∞—Ç–µ–∂—ñ" },
          ];
          const list = document.createElement("div");
          list.className = "card-grid";
          providers.forEach((provider) => {
            const card = document.createElement("button");
            card.type = "button";
            card.className = "select-card";
            card.dataset.value = provider.key;
            card.innerHTML = `<strong>${provider.title}</strong><span>${provider.desc}</span>`;
            if ((state.payments?.provider || "") === provider.key) {
              card.classList.add("active");
            }
            card.addEventListener("click", () => {
              updateState((draft) => {
                draft.payments = { provider: provider.key };
              });
              ctx.markComplete();
            });
            list.appendChild(card);
          });
          container.appendChild(list);
        },
      },
      {
        id: "addon-payments-env",
        title: "–ö–ª—é—á—ñ —É .env",
        prompt:
          "Task: –¥–æ–¥–∞–π –¥–æ .env —Ç–∞ .env.example –∫–ª—é—á—ñ –¥–ª—è –ø–ª–∞—Ç–µ–∂—ñ–≤ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ STRIPE_SECRET_KEY / WAYFORPAY_SECRET_KEY) —Ç–∞ –æ–Ω–æ–≤–∏ README.",
        chat: "chat2",
      },
      {
        id: "addon-payments-handler",
        title: "–•–µ–Ω–¥–ª–µ—Ä /buy",
        prompt:
          "Task: —Ä–µ–∞–ª—ñ–∑—É–π /buy. –î–ª—è Stripe ‚Äî Checkout Session –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º. –î–ª—è WayForPay ‚Äî —Å—Ñ–æ—Ä–º—É–π –ø–ª–∞—Ç—ñ–∂–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è. –ü–æ—è—Å–Ω–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –±–æ—Ç–∞.",
        chat: "chat2",
      },
      {
        id: "addon-payments-success",
        title: "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö",
        prompt:
          "Task: –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó –æ–ø–ª–∞—Ç–∏ –ø–æ–∑–Ω–∞—á –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —è–∫ premium —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –µ–º–æ–¥–∑—ñ.",
      },
    ],
  };

  const milestoneToasts = [
    { threshold: 15, message: "–î–æ–±—Ä–∏–π —Å—Ç–∞—Ä—Ç. –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ." },
    { threshold: 30, message: "–Ñ –ø—Ä–æ–≥—Ä–µ—Å. –ù–∞—Å—Ç—É–ø–Ω–∏–π –∫—Ä–æ–∫ –ø—Ä–æ—Å—Ç–∏–π." },
    { threshold: 50, message: "–ü–æ–ª–æ–≤–∏–Ω–∞ –≥–æ—Ç–æ–≤–∞." },
    { threshold: 75, message: "–§—ñ–Ω—ñ—à –±–ª–∏–∑—å–∫–æ." },
    { threshold: 100, message: "–ì–æ—Ç–æ–≤–æ. –û–±–µ—Ä–∏ –∞–ø“ë—Ä–µ–π–¥." },
  ];

  const steps = buildSteps();

  attachEventListeners();
  applyTheme();
  render();

  function buildSteps() {
    const stepList = [];

    function addStep(step) {
      stepList.push(step);
    }

    const startSection = "–ï—Ç–∞–ø 1 ¬∑ –°—Ç–∞—Ä—Ç";
    addStep({
      id: "1.1",
      section: startSection,
      icon: "guide",
      title: "–ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è",
      desc: "–ó–∞–ø—É—Å–∫–∞—î–º–æ –º–∞–π—Å—Ç–µ—Ä —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–ª–∞—Å–Ω–æ–≥–æ Telegram-–±–æ—Ç–∞.",
      tags: ["guide"],
      render(container, ctx) {
        renderList(container, [
          "–©–æ —Ä–æ–±–∏–º–æ: –∑–∞–ø—É—Å–∫–∞—î–º–æ –º–∞–π—Å—Ç–µ—Ä —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–ª–∞—Å–Ω–æ–≥–æ Telegram-–±–æ—Ç–∞.",
          "–î—ñ—è: –Ω–∞—Ç–∏—Å–Ω–∏ ¬´–ü–æ—á–∞—Ç–∏¬ª.",
        ]);

        renderPrimary(container, ctx.isComplete() ? "–ì–æ—Ç–æ–≤–æ" : "–ü–æ—á–∞—Ç–∏", () => {
          updateState((draft) => {
            draft.started = true;
          });
          ctx.markComplete();
        });

        const hint = document.createElement("p");
        hint.className = "hint";
        hint.textContent = "–Ø–∫—â–æ –ø–µ—Ä–µ–¥—É–º–∞—î—à ‚Äî –∑–∞–≤–∂–¥–∏ –º–æ–∂–Ω–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ —Ü—å–æ–≥–æ –∫—Ä–æ–∫—É.";
        container.appendChild(hint);
      },
    });

    addStep({
      id: "1.2",
      section: startSection,
      icon: "guide",
      title: "–í–∏–±—ñ—Ä —Ç–∏–ø—É –±–æ—Ç–∞",
      desc: "–û–±–µ—Ä—ñ—Ç—å, —â–æ —Å–∞–º–µ —Ö–æ—á–µ—à –∑—Ä–æ–±–∏—Ç–∏. –°–∏—Å—Ç–µ–º–∞ –ø—ñ–¥—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ.",
      tags: ["guide"],
      when(state) {
        return state.started;
      },
      render(container, ctx) {
        const intro = document.createElement("p");
        intro.className = "step-note";
        intro.textContent = "–í–∏–±–µ—Ä–∏ —Å—Ü–µ–Ω–∞—Ä—ñ–π –Ω–∏–∂—á–µ ‚Äî –∫–æ–º–∞–Ω–¥–∏ –ø—ñ–¥—Ç—è–≥–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–∞–ª—å—à–∏—Ö –ø—Ä–æ–º–ø—Ç–∞—Ö.";
        container.appendChild(intro);

        const grid = document.createElement("div");
        });
        container.appendChild(action);

        const hint = document.createElement("p");
        hint.className = "hint";
        hint.textContent = "–Ø–∫—â–æ –ø–µ—Ä–µ–¥—É–º–∞—î—à ‚Äî –∑–∞–≤–∂–¥–∏ –º–æ–∂–Ω–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ —Ü—å–æ–≥–æ –∫—Ä–æ–∫—É.";
        container.appendChild(hint);
      },
    });

    addStep({
      id: "1.2",
      section: startSection,
      icon: "guide",
      title: "–í–∏–±—ñ—Ä —Ç–∏–ø—É –±–æ—Ç–∞",
      desc: "–û–±–µ—Ä—ñ—Ç—å, —â–æ —Å–∞–º–µ —Ö–æ—á–µ—à –∑—Ä–æ–±–∏—Ç–∏. –°–∏—Å—Ç–µ–º–∞ –ø—ñ–¥—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ.",
      tags: ["guide"],
      when(state) {
        return state.started;
      },
      render(container, ctx) {
        const intro = document.createElement("p");
        intro.className = "step-note";
        intro.textContent = "–í–∏–±–µ—Ä–∏ —Å—Ü–µ–Ω–∞—Ä—ñ–π –Ω–∏–∂—á–µ ‚Äî –∫–æ–º–∞–Ω–¥–∏ –ø—ñ–¥—Ç—è–≥–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–∞–ª—å—à–∏—Ö –ø—Ä–æ–º–ø—Ç–∞—Ö.";
        container.appendChild(intro);

        const grid = document.createElement("div");
        grid.className = "card-grid";
        Object.entries(botTypes).forEach(([key, info]) => {
          const card = document.createElement("button");
          card.type = "button";
          card.className = "select-card";
          card.dataset.value = key;
          const commands = info.commands
            .split(",")
            .map((cmd) => cmd.trim())
            .filter(Boolean)
            .join(", ");
          card.innerHTML = `<strong>${info.title}</strong><span>${info.desc}</span><span class="card-commands">${commands}</span>`;
          if (state.botType === key) card.classList.add("active");
          card.addEventListener("click", () => {
            updateState((draft) => {
              draft.botType = key;
              draft.ack["commands"] = info.commands;
            });
            ctx.markComplete();
          });
          grid.appendChild(card);
        });
        container.appendChild(grid);
        const hint = document.createElement("p");
        hint.className = "hint";
        hint.innerHTML = "<strong>–ü–æ—è—Å–Ω–µ–Ω–Ω—è:</strong> –ö–æ–º–∞–Ω–¥–∞ ‚Äî —Ü–µ —Å–ª–æ–≤–æ –∑ –∫–æ—Å–æ—é —Ä–∏—Å–∫–æ—é, —è–∫–µ —Ç–∏ –ø–∏—à–µ—à –±–æ—Ç—É, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ <code>/start</code>.";
        container.appendChild(hint);
      },
    });

    addStep({
      id: "1.3",
      section: startSection,
      icon: "guide",
      title: "–í–∏–±—ñ—Ä —Ä–µ–∂–∏–º—É –®–Ü",
      desc: "–û–±–µ—Ä–∏ —Ä–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏ –∑—ñ —à—Ç—É—á–Ω–∏–º —ñ–Ω—Ç–µ–ª–µ–∫—Ç–æ–º.",
      tags: ["guide"],
      when(state) {
        return state.botType !== "";
      },
      render(container, ctx) {
        const list = document.createElement("ul");
        list.className = "step-options";
        list.innerHTML = `
          <li><strong>ChatGPT-only</strong> ‚Äî –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ, –∞–ª–µ –∫–æ–¥ –∫–æ–ø—ñ—é—î—à –≤—Ä—É—á–Ω—É.</li>
          <li><strong>ChatGPT + Codex (Copilot)</strong> ‚Äî —à–≤–∏–¥—à–µ —ñ —á–∏—Å—Ç—ñ—à–µ, –∞–ª–µ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ Copilot.</li>
      desc: "–ü—Ä–∞—Ü—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–æ –∞–±–æ –≤ –±—Ä–∞—É–∑–µ—Ä—ñ —á–µ—Ä–µ–∑ Codespaces.",
      tags: ["env"],
      when(state) {
        return state.mode !== "";
      },
      render(container, ctx) {
        const options = [
          { key: "local", title: "Local", desc: "Python + —Ä–µ–¥–∞–∫—Ç–æ—Ä –Ω–∞ —Ç–≤–æ—î–º—É –ü–ö." },
          { key: "codespaces", title: "Codespaces", desc: "–£—Å–µ –≤ –±—Ä–∞—É–∑–µ—Ä—ñ. –ü–æ—Ç—Ä—ñ–±–µ–Ω GitHub." },
        ];
        renderSelectionCards(container, options, state.environment, (value) => {
          updateState((draft) => {
            draft.environment = value;
          });
          ctx.markComplete();
        });
      },
    });

    addStep({
      id: "1.5",
      section: startSection,
      icon: "check",
      title: "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤",
      desc: "–ü–æ—Å—Ç–∞–≤ –≥–∞–ª–æ—á–∫–∏, —â–æ –≤—Å–µ –≥–æ—Ç–æ–≤–æ –¥–æ —Ä–æ–±–æ—Ç–∏.",
      tags: ["checklist"],
      when(state) {
        return state.environment !== "";
      },
      render(container, ctx) {
        const checklist = document.createElement("div");
        checklist.className = "checklist-grid";
        [
          { key: "tools-python", label: "Python 3.10+ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ" },
          { key: "tools-editor", label: "–†–µ–¥–∞–∫—Ç–æ—Ä (VS Code / Cursor) –≤—ñ–¥–∫—Ä–∏–≤–∞—î—Ç—å—Å—è" },
          { key: "tools-github", label: "–Ñ –æ–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å GitHub" },
          { key: "tools-copilot", label: "Copilot –∞–∫—Ç–∏–≤–Ω–∏–π (—è–∫—â–æ –æ–±—Ä–∞–Ω–æ Codex)", when: (s) => s.mode === "codex" },
        ]
          .filter((item) => (item.when ? item.when(state) : true))
          .forEach((item) => {
            const wrapper = document.createElement("label");
            wrapper.className = "check-item";
            const checkbox = document.createElement("input");
            checkbox.type = "checkbox";
            checkbox.checked = Boolean(state.ack[item.key]);
            checkbox.addEventListener("change", () => {
              updateState((draft) => {
                draft.ack[item.key] = checkbox.checked;
              });
              if ([...checklist.querySelectorAll("input")].every((node) => node.checked)) {
                ctx.markComplete();
              }
            });
            const span = document.createElement("span");
            span.textContent = item.label;
            wrapper.append(checkbox, span);
            checklist.appendChild(wrapper);
          });
        container.appendChild(checklist);
      },
    });

    const prepSection = "–ï—Ç–∞–ø 2 ¬∑ –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞";
    addStep({
      id: "2.1",
      section: prepSection,
      icon: "file",
      title: "–°—Ç–≤–æ—Ä–∏ –ø–∞–ø–∫—É –ø—Ä–æ—î–∫—Ç—É",
      desc: "–ü–∞–ø–∫–∞ mybot —É –∑—Ä—É—á–Ω–æ–º—É –º—ñ—Å—Ü—ñ.",
      tags: ["guide"],
      render(container, ctx) {
        renderList(container, [
          "–°—Ç–≤–æ—Ä–∏ –ø–∞–ø–∫—É mybot (–º–æ–∂–Ω–∞ —ñ–Ω—à–∞ –Ω–∞–∑–≤–∞).",
          "–í—ñ–¥–∫—Ä–∏–π —ó—ó —É VS Code –∞–±–æ Cursor.",
          "–Ø–∫—â–æ –ø—Ä–∞—Ü—é—î—à —É Codespaces ‚Äî —Å—Ç–≤–æ—Ä–∏–º–æ –ø–∞–ø–∫—É —á–µ—Ä–µ–∑ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å GitHub.",
        ]);
      },
    });

    addStep({
      id: "2.2",
      section: prepSection,
      icon: "file",
      title: "requirements.txt",
      desc: "–î–æ–¥–∞–π –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏.",
      tags: ["file"],
      prompt: "aiogram==3.*\npython-dotenv",
      render(container) {
        renderList(container, [
          "–°—Ç–≤–æ—Ä–∏ —Ñ–∞–π–ª requirements.txt.",
          "–°–∫–æ–ø—ñ—é–π –≤–º—ñ—Å—Ç —Ç–∞ –∑–±–µ—Ä–µ–∂–∏.",
        ]);
        const pre = document.createElement("pre");
        pre.className = "code-block";
        pre.textContent = "aiogram==3.*\npython-dotenv";
        container.appendChild(pre);
      },
    });

    addStep({
      id: "2.3",
      section: prepSection,
      icon: "file",
      title: "main.py",
      desc: "–°—Ç–≤–æ—Ä–∏ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ñ–∞–π–ª ‚Äî –∫–æ–¥ –≤—Å—Ç–∞–≤–∏–º–æ –∑–≥–æ–¥–æ–º.",
      tags: ["file"],
      render(container, ctx) {
        renderList(container, [
          "–°—Ç–≤–æ—Ä–∏ —Ñ–∞–π–ª main.py —É –∫–æ—Ä–µ–Ω—ñ –ø—Ä–æ—î–∫—Ç—É.",
          "–ü–æ–∫–∏ —â–æ –∑–∞–ª–∏—à –ø–æ—Ä–æ–∂–Ω—ñ–º ‚Äî –ø—ñ—Å–ª—è –ø—Ä–æ–º–ø—Ç–∞ –≤—Å—Ç–∞–≤–∏–º–æ –∫–æ–¥.",
        ]);
      },
    });

    addStep({
      id: "2.4",
      section: prepSection,
      icon: "file",
      title: ".env",
      desc: "–ü—ñ–¥–≥–æ—Ç—É—î–º–æ –º—ñ—Å—Ü–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞.",
      tags: ["file"],
      prompt: "TOKEN=—Å—é–¥–∏_–≤—Å—Ç–∞–≤–∏—à_—Ç–æ–∫–µ–Ω",
      render(container) {
        renderList(container, [
          "–°—Ç–≤–æ—Ä–∏ —Ñ–∞–π–ª .env —É –∫–æ—Ä–µ–Ω—ñ.",
          "–î–æ–¥–∞–π —Ä—è–¥–æ–∫ TOKEN=... (–±–µ–∑ –ª–∞–ø–æ–∫).",
          "–ó–±–µ—Ä–µ–∂–∏ —Ñ–∞–π–ª. –ù–µ –∫–æ–º—ñ—Ç—å —É –≤—ñ–¥–∫—Ä–∏—Ç–∏–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π.",
        ]);
        const pre = document.createElement("pre");
        pre.className = "code-block";
        pre.textContent = "TOKEN=—Å—é–¥–∏_–≤—Å—Ç–∞–≤–∏—à_—Ç–æ–∫–µ–Ω";
        container.appendChild(pre);
      },
    });

    addStep({
      id: "2.5",
      section: prepSection,
      icon: "chatgpt",
      title: "DEV BRIEF",
      desc: "–ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å –ø—Ä–æ—î–∫—Ç—É –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é.",
      tags: ["chat1"],
      promptProvider(ctx) {
        return makeDevBrief(state);
      },
      render(container) {
        const paragraph = document.createElement("p");
        paragraph.textContent = "–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ ‚Äî —Ç–µ–∫—Å—Ç –∑‚Äô—è–≤–∏—Ç—å—Å—è —É –±–ª–æ—Ü—ñ –ü—Ä–æ–º–ø—Ç. –°–∫–æ–ø—ñ—é–π –π–æ–≥–æ –≤ ChatGPT.";
        container.appendChild(paragraph);
        const btn = document.createElement("button");
        btn.className = "btn";
        btn.type = "button";
        btn.textContent = "–°–∫–æ–ø—ñ—é–≤–∞—Ç–∏ DEV BRIEF";
        btn.addEventListener("click", () => {
          navigator.clipboard.writeText(makeDevBrief(state)).then(() => showToast("DEV BRIEF —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ"));
        });
        container.appendChild(btn);
      },
    });

    addStep({
      id: "2.6",
      section: prepSection,
      icon: "chatgpt",
      title: "–ü—Ä–æ–º–ø—Ç –¥–ª—è –∫–æ–¥—É",
      desc: "–ó–∞–ø—Ä–æ—Å–∏ –∫–æ–¥ —É ChatGPT –∞–±–æ Codex.",
      tags: ["chat1", "chat2"],
      promptProvider(ctx) {
        return makeCodexPrompt(state);
      },
      render(container) {
        renderList(container, [
          "–°–∫–æ–ø—ñ—é–π –ø—Ä–æ–º–ø—Ç. –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É—î—à—Å—è ChatGPT ‚Äî –≤—Å—Ç–∞–≤ —É –ß–∞—Ç 1.",
          "–û—Ç—Ä–∏–º–∞–Ω–∏–π –∫–æ–¥ –ø–æ–≤–Ω—ñ—Å—Ç—é –≤—Å—Ç–∞–≤ —É main.py.",
          "–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è, —â–æ —Ñ–∞–π–ª –∑–±–µ—Ä–µ–∂–µ–Ω–æ.",
        ]);
        const buttonRow = document.createElement("div");
        buttonRow.className = "prompt-buttons";
        const chatBtn = document.createElement("button");
        chatBtn.className = "btn";
        chatBtn.textContent = "Copy for ChatGPT";
        chatBtn.type = "button";
        chatBtn.addEventListener("click", () => {
          navigator.clipboard.writeText(makeDevBrief(state)).then(() => showToast("–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è ChatGPT —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ"));
        });
        const codexBtn = document.createElement("button");
        codexBtn.className = "btn primary";
        codexBtn.textContent = "Copy for Codex";
        codexBtn.type = "button";
        codexBtn.addEventListener("click", () => {
          navigator.clipboard.writeText(makeCodexPrompt(state)).then(() => showToast("–ü—Ä–æ–º–ø—Ç –¥–ª—è Codex —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ"));
        });
        buttonRow.append(chatBtn, codexBtn);
        container.appendChild(buttonRow);
      },
    });

    const backendSection = "–ï—Ç–∞–ø 3 ¬∑ –ë–µ–∫–µ–Ω–¥";
    addStep({
      id: "3.1",
      section: backendSection,
      icon: "guide",
      title: "–í–∏–±—ñ—Ä –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è",
      desc: "–í–∏—Ä—ñ—à–∏, –¥–µ –±—É–¥—É—Ç—å –¥–∞–Ω—ñ.",
      tags: ["guide"],
      render(container, ctx) {
        const grid = document.createElement("div");
        grid.className = "card-grid";
        Object.entries(backendOptions).forEach(([key, option]) => {
          const card = document.createElement("button");
          card.className = "select-card";
          card.type = "button";
          if (state.backend === key) card.classList.add("active");
          card.dataset.value = key;
          card.innerHTML = `<strong>${option.title}</strong><span>${option.desc}</span>`;
          card.addEventListener("click", () => {
            updateState((draft) => {
              draft.backend = key;
            });
            ctx.markComplete();
          });
          grid.appendChild(card);
        });
        container.appendChild(grid);
      },
    });

    Object.entries(backendOptions).forEach(([key, option]) => {
      option.steps.forEach((subStep, index) => {
        addStep({
          id: `3.${index + 2}-${subStep.id}`,
          section: backendSection,
          icon: subStep.chat === "chat2" ? "cursor" : "guide",
          title: subStep.title,
          desc: subStep.desc,
          tags: subStep.chat === "chat2" ? ["chat2"] : ["guide"],
          prompt: subStep.prompt,
          when(state) {
            return state.backend === key;
          },
          render(container, ctx) {
            if (subStep.render) {
              subStep.render(container, ctx);
            } else {
              renderList(container, [subStep.desc]);
            }
          },
        });
      });
    });

    const addonsSection = "–ï—Ç–∞–ø 4 ¬∑ –î–æ–ø–æ–≤–Ω–µ–Ω–Ω—è";
    addStep({
      id: "4.1",
      section: addonsSection,
      icon: "guide",
      title: "–û–±–µ—Ä–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –º–æ–¥—É–ª—ñ",
      desc: "–ú–æ–∂–Ω–∞ —É–≤—ñ–º–∫–Ω—É—Ç–∏ –¥–∏–∑–∞–π–Ω, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –æ–ø–ª–∞—Ç–∏.",
      tags: ["guide"],
      render(container, ctx) {
        const toggles = [
          { key: "design", label: "–î–∏–∑–∞–π–Ω", desc: "–ö–Ω–æ–ø–∫–∏ —Ç–∞ –∫—Ä–∞—Å–∏–≤—ñ —Ç–µ–∫—Å—Ç–∏" },
          { key: "stats", label: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", desc: "–ö–æ–º–∞–Ω–¥–∞ /stats —Ç–∞ –∑–≤—ñ—Ç–∏" },
          { key: "payments", label: "–û–ø–ª–∞—Ç–∏", desc: "Stripe –∞–±–æ WayForPay" },
        ];
        const grid = document.createElement("div");
        grid.className = "toggle-grid";
        toggles.forEach((toggle) => {
          const button = document.createElement("button");
          button.type = "button";
          button.className = "toggle-card";
          if (state.addons?.[toggle.key]) button.classList.add("active");
          button.innerHTML = `<strong>${toggle.label}</strong><span>${toggle.desc}</span>`;
          button.addEventListener("click", () => {
            updateState((draft) => {
              draft.addons[toggle.key] = !draft.addons[toggle.key];
              if (!draft.addons[toggle.key]) {
                if (toggle.key === "payments") {
                  draft.payments.provider = "";
                }
                Object.keys(draft.ack).forEach((ackKey) => {
                  if (ackKey.startsWith(`addon-${toggle.key}`)) delete draft.ack[ackKey];
                });
              }
            });
          });
          grid.appendChild(button);
        });
        container.appendChild(grid);
      },
    });

    Object.entries(addonMicroSteps).forEach(([addonKey, stepsList]) => {
      stepsList.forEach((subStep, index) => {
        addStep({
          id: `4.${index + 2}-${subStep.id}`,
          section: addonsSection,
          icon: subStep.chat === "chat2" ? "cursor" : "guide",
          title: subStep.title,
          desc: "–í–∏–∫–æ–Ω–∞–π –¥—ñ—é —Ç–∞ –ø–æ—Å—Ç–∞–≤ –≥–∞–ª–æ—á–∫—É, –∫–æ–ª–∏ –≥–æ—Ç–æ–≤–æ.",
          tags: subStep.chat === "chat2" ? ["chat2"] : ["guide"],
          prompt: subStep.prompt,
          when(state) {
            if (!state.addons?.[addonKey]) return false;
            if (addonKey === "payments" && index > 0 && !state.payments?.provider) {
              return false;
            }
            return true;
          },
          render(container, ctx) {
            if (subStep.render) {
              subStep.render(container, ctx);
            } else {
              renderList(container, [subStep.prompt ? "–°–∫–æ–ø—ñ—é–π –ø—Ä–æ–º–ø—Ç —ñ –≤–∏–∫–æ–Ω–∞–π –∫—Ä–æ–∫." : subStep.title]);
            }
          },
        });
      });
    });

    const launchSection = "–ï—Ç–∞–ø 5 ¬∑ –ó–∞–ø—É—Å–∫ —ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞";
    addStep({
      id: "5.1",
      section: launchSection,
      icon: "telegram",
      title: "–û—Ç—Ä–∏–º–∞–π —Ç–æ–∫–µ–Ω —É BotFather",
      desc: "–°—Ç–≤–æ—Ä–∏ –±–æ—Ç–∞ —Ç–∞ —Å–∫–æ–ø—ñ—é–π TOKEN —É .env.",
      tags: ["telegram"],
      render(container) {
        renderList(container, [
          "–í—ñ–¥–∫—Ä–∏–π @BotFather —Ç–∞ –Ω–∞—Ç–∏—Å–Ω–∏ /newbot.",
          "–í–∏–≥–∞–¥–∞–π –Ω–∞–∑–≤—É –π –æ—Ç—Ä–∏–º–∞—î—à —Ç–æ–∫–µ–Ω.",
          "–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏ —à–∞–±–ª–æ–Ω .env —ñ –≤—Å—Ç–∞–≤–∏—Ç–∏ TOKEN.",
        ]);
        const actions = document.createElement("div");
        actions.className = "prompt-buttons";
        const open = document.createElement("button");
        open.className = "btn";
        open.textContent = "–í—ñ–¥–∫—Ä–∏—Ç–∏ BotFather";
        open.type = "button";
        open.addEventListener("click", () => window.open("https://t.me/BotFather", "_blank", "noopener"));
        const copy = document.createElement("button");
        copy.className = "btn";
        copy.type = "button";
        copy.textContent = "–°–∫–æ–ø—ñ—é–≤–∞—Ç–∏ —à–∞–±–ª–æ–Ω .env";
        copy.addEventListener("click", () => {
          navigator.clipboard
            .writeText("TOKEN=—Å—é–¥–∏_–≤—Å—Ç–∞–≤–∏—à_—Ç–æ–∫–µ–Ω")
            .then(() => showToast("–®–∞–±–ª–æ–Ω —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ"));
        });
        actions.append(open, copy);
        container.appendChild(actions);
      },
    });

    addStep({
      id: "5.2",
      section: launchSection,
      icon: "telegram",
      title: "–î–æ–¥–∞–π –∫–æ–º–∞–Ω–¥–∏ —É BotFather",
      desc: "–°–∫–æ–ø—ñ—é–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ —ñ –¥–æ–¥–∞–π —á–µ—Ä–µ–∑ /setcommands.",
      tags: ["telegram"],
      promptProvider() {
        return makeCommandBlock(state);
      },
      render(container) {
        renderList(container, [
          "–£ BotFather –Ω–∞–ø–∏—à–∏ /setcommands —Ç–∞ –æ–±–µ—Ä–∏ —Å–≤–æ–≥–æ –±–æ—Ç–∞.",
          "–í—Å—Ç–∞–≤ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –Ω–∏–∂—á–µ.",
          "–ü—ñ—Å–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ BotFather –∑–∞–∫—Ä–∏–π –¥—ñ–∞–ª–æ–≥ —ñ –ø–æ–≤–µ—Ä–Ω–∏—Å—å —Å—é–¥–∏.",
        ]);
        const pre = document.createElement("pre");
        pre.className = "code-block";
        pre.textContent = makeCommandBlock(state);
        container.appendChild(pre);
      },
    });

    addStep({
      id: "5.3",
      section: launchSection,
      icon: "terminal",
      title: "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞",
      desc: "–°–∫–æ–ø—ñ—é–π –∫–æ–º–∞–Ω–¥–∏ —Ç–∞ –≤–∏–∫–æ–Ω–∞–π –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ.",
      tags: ["terminal"],
      render(container) {
        const commands = buildLaunchCommands(state.environment || "local");
        renderList(container, [
          "–í—ñ–¥–∫—Ä–∏–π —Ç–µ—Ä–º—ñ–Ω–∞–ª —É –∫–æ—Ä–µ–Ω—ñ –ø—Ä–æ—î–∫—Ç—É.",
          "–í–∏–∫–æ–Ω–∞–π –∫–æ–º–∞–Ω–¥–∏ –ø–æ —á–µ—Ä–∑—ñ.",
          "–Ø–∫—â–æ –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ ‚Äî –Ω–∞—Ç–∏—Å–Ω–∏ ¬´–ü—Ä–æ–±–ª–µ–º–∞?¬ª.",
        ]);
        const pre = document.createElement("pre");
        pre.className = "code-block";
        pre.textContent = commands.join("\n");
        container.appendChild(pre);
        promptEl.dataset.launch = commands.join("\n");
      },
      promptProvider() {
        return buildLaunchCommands(state.environment || "local").join("\n");
      },
    });

    addStep({
      id: "5.4",
      section: launchSection,
      icon: "check",
      title: "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤ Telegram",
      desc: "–ü—Ä–æ–π–¥–∏ —á–µ–∫–ª—ñ—Å—Ç.",
      tags: ["guide"],
      render(container) {
        const command = getPrimaryCommand();
        renderList(container, [
          "–í—ñ–¥–∫—Ä–∏–π —Å–≤–æ–≥–æ –±–æ—Ç–∞ —É Telegram.",
          "–ù–∞–ø–∏—à–∏ /start ‚Äî –º–∞—î –ø—Ä–∏–π—Ç–∏ –≤—ñ—Ç–∞–Ω–Ω—è.",
          "–ù–∞–ø–∏—à–∏ /help ‚Äî –ø–æ–±–∞—á–∏—à –∫–æ—Ä–æ—Ç–∫—É —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é.",
          `–í–∏–∫–æ–Ω–∞–π ${command} ‚Äî –ø–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è, —â–æ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∞—Ü—é—î.`,
        ]);
      },
    });

    addStep({
      id: "5.5",
      section: launchSection,
      icon: "guide",
      title: "–†–µ–∑–µ—Ä–≤–Ω–∞ –∫–æ–ø—ñ—è",
      desc: "–ó–±–µ—Ä–µ–∂–∏ –ø—Ä–æ—î–∫—Ç —É –±–µ–∑–ø–µ—á–Ω–æ–º—É –º—ñ—Å—Ü—ñ.",
      tags: ["guide"],
      render(container) {
        renderList(container, [
          "–°–∫–æ–ø—ñ—é–π –ø–∞–ø–∫—É –ø—Ä–æ—î–∫—Ç—É —É —Ö–º–∞—Ä—É –∞–±–æ –ø—Ä–∏–≤–∞—Ç–Ω–∏–π GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π.",
          "–ü–µ—Ä–µ–≤—ñ—Ä, —â–æ –ø—ñ—Å–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞ –≤—Å–µ –ø—Ä–∞—Ü—é—î.",
        ]);
      },
    });

    const finishSection = "–ï—Ç–∞–ø 6 ¬∑ –§—ñ–Ω—ñ—à";
    addStep({
      id: "6.1",
      section: finishSection,
      icon: "guide",
      title: "–ì–æ—Ç–æ–≤–æ!",
      desc: "–ú–æ–∂–µ—à —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ –∞–±–æ –ø–æ–∫—Ä–∞—â–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–æ–≥–æ.",
      tags: ["guide"],
      render(container) {
        const paragraph = document.createElement("p");
        paragraph.textContent = "–í—ñ—Ç–∞—é! –ë–æ—Ç –≥–æ—Ç–æ–≤–∏–π. –û–±–µ—Ä–∏, —â–æ —Ä–æ–±–∏–º–æ –¥–∞–ª—ñ.";
        container.appendChild(paragraph);

        const actions = document.createElement("div");
        actions.className = "finish-actions";

        const resetBtn = document.createElement("button");
        resetBtn.className = "btn";
        resetBtn.textContent = "–°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞";
        resetBtn.addEventListener("click", () => {
          localStorage.removeItem(STORAGE_KEY);
          state = clone(defaultState);
          render();
        });

        const addonsBtn = document.createElement("button");
        addonsBtn.className = "btn primary";
        addonsBtn.textContent = "–ü–æ–∫—Ä–∞—â–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–æ–≥–æ";
        addonsBtn.addEventListener("click", () => {
          const index = visibleSteps().findIndex((step) => step.section === addonsSection);
          if (index >= 0) {
            setStep(index);
          }
        });

        actions.append(resetBtn, addonsBtn);
        container.appendChild(actions);
      },
    });

    return stepList;
  }

  function visibleSteps() {
    return steps.filter((step) => {
      if (typeof step.when === "function") {
        return step.when(state);
      }
      return true;
    });
  }

  function loadState() {
    try {
      const saved = JSON.parse(localStorage.getItem(STORAGE_KEY) || "null");
      if (!saved) return clone(defaultState);
      return Object.assign(clone(defaultState), saved);
    } catch (error) {
      console.error("State load error", error);
      return clone(defaultState);
    }
  }

  function saveState() {
    localStorage.setItem(STORAGE_KEY, JSON.stringify(state));
  }

  function updateState(mutator) {
    const draft = clone(state);
    mutator(draft);
    state = draft;
    saveState();
    render();
  }

  function setStep(index) {
    const list = visibleSteps();
    const clamped = Math.max(0, Math.min(index, list.length - 1));
    updateState((draft) => {
      draft.currentStep = clamped;
    });
  }

  function getActiveStep() {
    const list = visibleSteps();
    if (!list.length) {
      return { step: null, index: 0, list };
    }
    const index = Math.max(0, Math.min(state.currentStep || 0, list.length - 1));
    return { step: list[index], index, list };
  }

  function markComplete(stepId) {
    updateState((draft) => {
      draft.ack[stepId] = true;
    });
  }

  function attachEventListeners() {
    document.getElementById("ztb-copy").addEventListener("click", () => {
      const { step } = getActiveStep();
      if (!step) {
        showToast("–ö—Ä–æ–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ. –ù–∞—Ç–∏—Å–Ω–∏ ¬´–°–∫–∏–Ω—É—Ç–∏¬ª.");
        return;
      }
      const text = resolvePrompt(step);
      if (!text) {
        showToast("–ù–µ–º–∞—î —Ç–µ–∫—Å—Ç—É –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è");
        return;
      }
      navigator.clipboard.writeText(text).then(() => showToast("–°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ"));
    });

    document.getElementById("ztb-open").addEventListener("click", () => {
      const { step } = getActiveStep();
      if (!step) {
        showToast("–ö—Ä–æ–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ. –ù–∞—Ç–∏—Å–Ω–∏ ¬´–°–∫–∏–Ω—É—Ç–∏¬ª.");
        return;
      }
      if (step && step.link) {
        window.open(step.link, "_blank", "noopener");
      } else {
        showToast("–ù–µ–º–∞—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è");
      }
    });

    document.getElementById("ztb-done").addEventListener("click", () => {
      const { step, index, list } = getActiveStep();
      if (!step) {
        showToast("–ù–∞—Ç–∏—Å–Ω–∏ ¬´–°–∫–∏–Ω—É—Ç–∏¬ª, —â–æ–± –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ –º–∞—Ä—à—Ä—É—Ç.");
        return;
      }
      markComplete(step.id);
      if (index < list.length - 1) {
        setStep(index + 1);
      }
    });

    document.getElementById("ztb-problem").addEventListener("click", () => {
      openModal(troublesModal);
    });

    document.getElementById("ztb-help").addEventListener("click", () => openModal(helpModal));
    document.getElementById("ztb-troubles").addEventListener("click", () => openModal(troublesModal));
    document.getElementById("ztb-guide").addEventListener("click", startTour);
    document.getElementById("ztb-reset").addEventListener("click", () => {
      if (confirm("–°–∫–∏–Ω—É—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å?")) {
        localStorage.removeItem(STORAGE_KEY);
        state = clone(defaultState);
        saveState();
        render();
      }
    });

    document.getElementById("toggle-theme").addEventListener("click", toggleTheme);
    document.getElementById("ztb-toggle").addEventListener("click", toggleSections);

    noteEl.addEventListener("input", () => {
      const { step } = getActiveStep();
      if (!step) return;
      updateState((draft) => {
        draft.notes[step.id] = noteEl.value;
      });
    });

    searchEl.addEventListener("input", () => {
      uiState.search = searchEl.value.toLowerCase();
      renderSidebar();
    });

    document.addEventListener("click", (event) => {
      if (event.target.matches("[data-close-modal]")) {
        closeModals();
      }

      if (event.target.matches(".quick-action")) {
        const link = event.target.dataset.link;
        if (link) window.open(link, "_blank", "noopener");
      }

      if (event.target.dataset.logChat !== undefined) {
        copyNavigatorLog();
      }

      if (event.target.dataset.openToken !== undefined) {
        openModal(tokenModal);
      }
    });

    document.getElementById("ztb-copy-env").addEventListener("click", () => {
      navigator.clipboard
        .writeText("TOKEN=—Ç—É—Ç_—Ç–æ–∫–µ–Ω\nSTRIPE_SECRET_KEY=... (—è–∫—â–æ —Ç—Ä–µ–±–∞)")
        .then(() => showToast("–®–∞–±–ª–æ–Ω .env —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ"));
    });

    document.getElementById("ztb-copy-problem").addEventListener("click", () => {
      const textArea = document.getElementById("ztb-problem-text");
      const context = buildProblemContext(textArea.value);
      navigator.clipboard.writeText(context).then(() => showToast("–ó–∞–ø–∏—Ç —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ"));
    });

    backdrop.addEventListener("click", closeModals);

    document.getElementById("tour-next").addEventListener("click", () => advanceTour(1));
    document.getElementById("tour-prev").addEventListener("click", () => advanceTour(-1));
    document.getElementById("tour-skip").addEventListener("click", endTour);
    tourOverlay.addEventListener("click", endTour);

    troublesModal.querySelectorAll(".tab").forEach((tab) => {
      tab.addEventListener("click", () => {
        troublesModal
          .querySelectorAll(".tab")
          .forEach((node) => node.classList.toggle("active", node === tab));
        troublesModal
          .querySelectorAll(".tab-panel")
          .forEach((panel) => panel.classList.toggle("active", panel.dataset.panel === tab.dataset.tab));
      });
    });

    document.addEventListener("keydown", (event) => {
      if (uiState.tourActive && event.key === "Escape") {
        endTour();
      }
    });
  }

  function resolvePrompt(step) {
    if (!step) return "";
    if (typeof step.promptProvider === "function") {
      return step.promptProvider();
    }
    return step.prompt || "";
  }

  function render() {
    const { step, index, list } = getActiveStep();

    if (!step) {
      stepHeading.textContent = "–ö—Ä–æ–∫ 0.0 ¬∑ –û–Ω–æ–≤–∏ –ø–∞–Ω–µ–ª—å";
      mainTitle.textContent = "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫—Ä–æ–∫—ñ–≤";
      descEl.textContent = "–°–∫–∏–Ω—å –ø—Ä–æ–≥—Ä–µ—Å –∞–±–æ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂ —Å—Ç–æ—Ä—ñ–Ω–∫—É.";
      promptEl.textContent = "";
      promptEl.classList.add("empty");
      tagsEl.innerHTML = "";
      contentEl.innerHTML = "";
      const message = document.createElement("p");
      message.className = "hint";
      message.textContent = "–û–Ω–æ–≤–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Å—è –∫–Ω–æ–ø–∫–æ—é ¬´–°–∫–∏–Ω—É—Ç–∏¬ª, —â–æ–± –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ –º–∞—Ä—à—Ä—É—Ç.";
      contentEl.appendChild(message);
      noteEl.value = "";
      noteEl.disabled = true;
      renderSidebar(list, index);
      updateProgress(list);
      statusEl.textContent = "";
      return;
    }

    const prompt = resolvePrompt(step);

    stepHeading.textContent = `–ö—Ä–æ–∫ ${step.id} ¬∑ ${step.title}`;
    mainTitle.textContent = step.title;
    descEl.textContent = step.desc || "";
    promptEl.textContent = prompt || "";
    promptEl.classList.toggle("empty", !prompt);

    const note = state.notes?.[step.id] || "";
    noteEl.disabled = false;
    noteEl.value = note;

    renderTags(step);
    renderContent(step);
    renderSidebar(list, index);
    updateProgress(list);
    updateMilestone();

    const quickButtons = quickActions.querySelectorAll(".quick-action");
    quickButtons.forEach((btn) => btn.classList.toggle("highlight", false));

    const isDone = Boolean(state.ack?.[step.id]);
    statusEl.textContent = isDone ? "‚úÖ –ö—Ä–æ–∫ –≤–∏–∫–æ–Ω–∞–Ω–æ" : "";
  }

  function renderTags(step) {
    if (!step) {
      tagsEl.innerHTML = "";
      return;
    }
    tagsEl.innerHTML = "";
    const baseTags = step.tags || [];
    baseTags.forEach((tag) => {
      const span = document.createElement("span");
      span.className = `tag tag--${tag}`;
      span.textContent = tag.toUpperCase();
      if (tag === "chat1") span.textContent = "CHAT 1 ¬∑ –ù–∞–≤—ñ–≥–∞—Ç–æ—Ä";
      if (tag === "chat2") span.textContent = "CHAT 2 ¬∑ Cursor";
      tagsEl.appendChild(span);
    });
    if (step.tags?.includes("chat1")) {
      const chatBtn = quickActions.querySelector('[data-link="https://chat.openai.com/"]');
      chatBtn && chatBtn.classList.add("highlight");
    }
    if (step.tags?.includes("chat2")) {
      const cursorBtn = quickActions.querySelector('[data-link="https://cursor.sh/"]');
      cursorBtn && cursorBtn.classList.add("highlight");
    }
  }

  function renderContent(step) {
    contentEl.innerHTML = "";
    if (!step) {
      return;
    }
    if (typeof step.render === "function") {
      step.render(contentEl, {
        markComplete: () => markComplete(step.id),
        isComplete: () => Boolean(state.ack?.[step.id]),
      });
    }
  }

  function renderList(container, items) {
    const list = document.createElement("ol");
    list.className = "instructions-list";
    items.forEach((item) => {
      const li = document.createElement("li");
      li.textContent = item;
      list.appendChild(li);
    });
    container.appendChild(list);
    return list;
  }

  function renderPrimary(container, label, onClick) {
    const button = document.createElement("button");
    button.className = "btn primary";
    button.type = "button";
    button.textContent = label;
    button.addEventListener("click", onClick);
    container.appendChild(button);
  }

  function renderSelectionCards(container, options, selected, onSelect) {
    const grid = document.createElement("div");
    grid.className = "card-grid";
    options.forEach((option) => {
      const card = document.createElement("button");
      card.type = "button";
      card.className = "select-card";
      if (selected === option.key) card.classList.add("active");
      card.dataset.value = option.key;
      card.innerHTML = `<strong>${option.title}</strong><span>${option.desc}</span>`;
      card.addEventListener("click", () => {
        onSelect(option.key);
      });
      grid.appendChild(card);
    });
    container.appendChild(grid);
  }

  function renderSidebar(list = visibleSteps(), activeIndex = state.currentStep || 0) {
    sectionsEl.innerHTML = "";
    const search = uiState.search;
    const grouped = {};
    list.forEach((step, index) => {
      if (search && !(`${step.id} ${step.title}`.toLowerCase().includes(search))) {
        return;
      }
      if (!grouped[step.section]) {
        grouped[step.section] = [];
      }
      grouped[step.section].push({ step, index });
    });

    Object.entries(grouped).forEach(([sectionTitle, steps]) => {
      const section = document.createElement("div");
      section.className = "sidebar-section";
      const header = document.createElement("div");
      header.className = "sidebar-section__header";
      if (!(sectionTitle in uiState.sectionsOpen)) {
        uiState.sectionsOpen[sectionTitle] = true;
      }
      const open = uiState.sectionsOpen[sectionTitle];
      header.textContent = sectionTitle;
      header.addEventListener("click", () => {
        uiState.sectionsOpen[sectionTitle] = !(uiState.sectionsOpen[sectionTitle] ?? true);
        renderSidebar(list, activeIndex);
      });
      section.appendChild(header);
      if (open) {
        const stepsContainer = document.createElement("div");
        stepsContainer.className = "sidebar-steps";
        steps.forEach(({ step, index }) => {
          const item = document.createElement("div");
          item.className = "sidebar-step";
          if (index === activeIndex) item.classList.add("active");
          if (state.ack?.[step.id]) item.classList.add("done");
          item.addEventListener("click", () => setStep(index));

          const indexSpan = document.createElement("div");
          indexSpan.className = "sidebar-step__index";
          indexSpan.textContent = state.ack?.[step.id] ? "‚úì" : step.id;

          const body = document.createElement("div");
          body.className = "sidebar-step__title";
          body.textContent = step.title;

          const meta = document.createElement("div");
          meta.className = "sidebar-step__meta";
          const icon = iconLabels[step.icon]?.icon || "‚û°Ô∏è";
          meta.textContent = icon;

          item.append(indexSpan, body, meta);
          stepsContainer.appendChild(item);
        });
        section.appendChild(stepsContainer);
      }
      sectionsEl.appendChild(section);
    });

    if (!Object.keys(grouped).length) {
      const empty = document.createElement("p");
      empty.className = "sidebar-empty";
      empty.textContent = "–ö—Ä–æ–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ù–∞—Ç–∏—Å–Ω–∏ ¬´–°–∫–∏–Ω—É—Ç–∏¬ª, —â–æ–± –ø–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ.";
      sectionsEl.appendChild(empty);
    }
  }

  function updateProgress(list) {
    const total = list.length;
    const completed = list.filter((step) => state.ack?.[step.id]).length;
    const percent = total ? Math.round((completed / total) * 100) : 0;
    progressFill.style.width = `${percent}%`;
    progressText.textContent = `${percent}% –≤–∏–∫–æ–Ω–∞–Ω–æ`;
    progressFill.parentElement.setAttribute("aria-valuenow", String(percent));
    uiState.progress = percent;
  }

  function updateMilestone() {
    const percent = uiState.progress || 0;
    for (const milestone of milestoneToasts) {
      if (percent >= milestone.threshold && uiState.lastMilestone < milestone.threshold) {
        uiState.lastMilestone = milestone.threshold;
        showToast(milestone.message);
        break;
      }
    }
  }

  function openModal(modal) {
    closeModals();
    modal.classList.add("open");
    backdrop.classList.add("visible");
  }

  function closeModals() {
    document.querySelectorAll(".modal.open").forEach((modal) => modal.classList.remove("open"));
    backdrop.classList.remove("visible");
    endTour();
  }

  function showToast(message) {
    toastEl.textContent = message;
    toastEl.classList.add("show");
    setTimeout(() => toastEl.classList.remove("show"), 2000);
  }

  function toggleTheme() {
    const next = panel.dataset.theme === "dark" ? "light" : "dark";
    panel.dataset.theme = next;
    document.body.dataset.theme = next;
    localStorage.setItem(THEME_STORAGE_KEY, next);
  }

  function applyTheme() {
    const stored = localStorage.getItem(THEME_STORAGE_KEY);
    let theme = stored;
    if (!theme || theme === "auto") {
      theme = window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light";
    }
    panel.dataset.theme = theme;
    document.body.dataset.theme = theme;
  }

  function toggleSections() {
    const openAll = Object.values(uiState.sectionsOpen).some((v) => !v);
    const value = openAll ? true : false;
    Object.keys(uiState.sectionsOpen).forEach((key) => (uiState.sectionsOpen[key] = value));
    renderSidebar();
  }

  function buildProblemContext(extra) {
    const { step } = getActiveStep();
    const notes = Object.values(state.notes || {});
    const tail = notes
      .map((note) => note.trim())
      .filter(Boolean)
      .slice(-NOTES_HISTORY_LIMIT)
      .join("\n---\n");
    const stepLine = step ? `–ö—Ä–æ–∫: ${step.id} ¬∑ ${step.title}` : "–ö—Ä–æ–∫: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π (—Å–∫–∏–Ω—å –ø—Ä–æ–≥—Ä–µ—Å)";

    return [
      "–ü—Ä–∏–≤—ñ—Ç! –ü—Ä–∞—Ü—é—é —á–µ—Ä–µ–∑ Zero-to-Bot Panel.",
      stepLine,
      extra ? `–û–ø–∏—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${extra}` : "",
      tail ? `–û—Å—Ç–∞–Ω–Ω—ñ –Ω–æ—Ç–∞—Ç–∫–∏/–ª–æ–≥–∏:\n${tail}` : "",
      "–î–æ–ø–æ–º–æ–∂–∏ –∫–æ—Ä–æ—Ç–∫–æ: —â–æ —Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ –∫—Ä–æ–∫ –∑–∞ –∫—Ä–æ–∫–æ–º?",
    ]
      .filter(Boolean)
      .join("\n\n");
  }

  function copyNavigatorLog() {
    const context = buildProblemContext("–ü—Ä–æ–±–ª–µ–º–∞: –±–æ—Ç –Ω–µ –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è");
    navigator.clipboard.writeText(context).then(() => showToast("–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ"));
  }

  function buildLaunchCommands(environment) {
    const commands = ["python --version"];
    if (environment === "codespaces") {
      commands.push("python -m venv .venv", "source .venv/bin/activate");
    } else {
      commands.push("python -m venv .venv", "source .venv/bin/activate # Windows: .\\\\.venv\\\\Scripts\\\\activate");
    }
    commands.push("pip install -r requirements.txt", "python main.py");
    return commands;
  }

  function getPrimaryCommand() {
    const type = botTypes[state.botType] || botTypes.custom;
    const commands = (type.commands || "").split(",").map((item) => item.trim());
    const custom = commands.find((command) => !["/start", "/help"].includes(command));
    return custom || "/add";
  }

  function makeCommandBlock(currentState) {
    const type = botTypes[currentState.botType] || botTypes.custom;
    const commands = (type.commands || "")
      .split(",")
      .map((item) => item.trim())
      .filter(Boolean);
    return commands
      .map((command) => `${command} - ${commandDescriptions[command] || "–î–æ–¥–∞—Ç–∫–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞"}`)
      .join("\n");
  }

  function describeBackend(currentState) {
    const key = currentState.backend || "json";
    switch (key) {
      case "sqlite":
        return "Persistent storage via SQLite database file db.sqlite3.";
      case "sheets":
        return "Records stored inside a shared Google Sheet via gspread.";
      case "postgres":
        return "PostgreSQL database running via docker-compose for teamwork.";
      default:
        return "Default storage is a JSON file located at data/db.json.";
    }
  }

  function makeDevBrief(currentState) {
    const type = botTypes[currentState.botType] || botTypes.custom;
    const commands = (type.commands || "").split(",").map((item) => item.trim()).filter(Boolean);
    const purposeMap = {
      crm: "Help a business track clients, tasks, and follow-ups in Telegram.",
      task: "Organise personal or team tasks with reminders and progress.",
      habit: "Coach users through daily habits with streaks and friendly nudges.",
      faq: "Answer frequent questions and route users to a human helper when needed.",
      shop: "Showcase a catalogue and accept orders with basic checkout.",
      booking: "Let clients browse free slots and manage appointments.",
      custom: "Build a bespoke helper tailored to the user‚Äôs idea.",
    };
    const purpose = purposeMap[currentState.botType] || purposeMap.custom;
    const tone = currentState.botType === "faq" || currentState.botType === "booking" ? "Professional and clear" : "Friendly and encouraging";
    const channel = currentState.botType === "faq" ? "Works in both private chats and groups" : "Works in private chats";
    const storage = describeBackend(currentState);

    return [
      `Project type: ${type.title} Telegram bot.`,
      `Purpose: ${purpose}`,
      commands.length ? `Planned commands: ${commands.join(", ")}.` : "",
      `Tone: ${tone}.`,
      `Channel: ${channel}.`,
      storage,
    ]
      .filter(Boolean)
      .join("\n");
  }

  function makeCodexPrompt(currentState) {
    const brief = makeDevBrief(currentState);
    const commands = (botTypes[currentState.botType]?.commands || botTypes.custom.commands)
      .split(",")
      .map((item) => item.trim())
      .filter(Boolean);
    const environment =
      currentState.environment === "codespaces"
        ? "Target environment: GitHub Codespaces (Linux, Python 3.10)."
        : "Target environment: Local machine with Python 3.10.";

    const repoStructure = [
      "README.md",
      "src/main.py",
      "src/handlers/__init__.py",
      "src/handlers/basic.py",
      "src/storage/__init__.py",
      "src/storage/engine.py",
      "src/config.py",
      ".env.example",
      "requirements.txt",
    ];

    const storage = describeBackend(currentState);

    return [
      "You are Copilot/Codex helping scaffold an aiogram v3 Telegram bot.",
      environment,
      "Use python-dotenv to read TOKEN from .env and handle missing values gracefully.",
      "\nProject brief:",
      brief,
      "\nCommands to implement:",
      commands.join(", "),
      "\nRepository structure:",
      ...repoStructure.map((entry) => `- ${entry}`),
      "\nKey tasks:",
      "1. Build src/main.py with aiogram bot, routers, and logging.",
      "2. Ensure .env.example lists TOKEN and any extra secrets.",
      `3. Storage layer: ${storage}`,
      "4. Generate README.md with setup (venv, pip install, python main.py).",
      "5. Provide clear explanations if additional steps are required.",
    ].join("\n");
  }

  function startTour() {
    uiState.tourActive = true;
    uiState.tourIndex = 0;
    tourOverlay.style.display = "block";
    tourTooltip.classList.add("show");
    showTourStep();
  }

  function showTourStep() {
    const steps = [
      { element: "#ztb-sidebar", text: "–°–∞–π–¥–±–∞—Ä ‚Äî —Ç—É—Ç —É—Å—ñ –µ—Ç–∞–ø–∏. –ú–æ–∂–Ω–∞ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏—Å—è —É –±—É–¥—å-—è–∫–∏–π –∫—Ä–æ–∫." },
      { element: ".step-card", text: "–¶–µ–Ω—Ç—Ä ‚Äî —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫—Ä–æ–∫—É. –î—ñ–π –∑–∞ –ø—ñ–¥–∫–∞–∑–∫–∞–º–∏." },
      { element: ".step-actions", text: "–ö–Ω–æ–ø–∫–∏: –∫–æ–ø—ñ—é–≤–∞—Ç–∏, –≤—ñ–¥–∫—Ä–∏—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —Ç–∞ –≤—ñ–¥–º—ñ—Ç–∏—Ç–∏ ¬´–í–∏–∫–æ–Ω–∞–Ω–æ¬ª." },
      { element: ".progress-wrapper", text: "–ü—Ä–æ–≥—Ä–µ—Å –ø–æ–∫–∞–∑—É—î, —Å–∫—ñ–ª—å–∫–∏ –≤–∂–µ –∑—Ä–æ–±–ª–µ–Ω–æ." },
      { element: "#ztb-help", text: "–¢—Ä–∞–±–ª—à—É—Ç—ñ–Ω–≥ —Ç–∞ –¥–æ–≤—ñ–¥–∫–∞ –¥–æ–ø–æ–º–æ–∂—É—Ç—å, —è–∫—â–æ —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫." },
    ];
    const step = steps[uiState.tourIndex];
    document.querySelectorAll(".highlighted").forEach((node) => node.classList.remove("highlighted"));
    const target = document.querySelector(step.element);
    if (target) target.classList.add("highlighted");
    tourText.textContent = step.text;
    document.getElementById("tour-prev").disabled = uiState.tourIndex === 0;
    document.getElementById("tour-next").textContent = uiState.tourIndex === steps.length - 1 ? "–ó–∞–≤–µ—Ä—à–∏—Ç–∏" : "–î–∞–ª—ñ";
  }

  function advanceTour(direction) {
    const stepsCount = 5;
    uiState.tourIndex += direction;
    if (uiState.tourIndex >= stepsCount) {
      endTour();
      return;
    }
    if (uiState.tourIndex < 0) uiState.tourIndex = 0;
    showTourStep();
  }

  function endTour() {
    uiState.tourActive = false;
    tourOverlay.style.display = "none";
    tourTooltip.classList.remove("show");
    document.querySelectorAll(".highlighted").forEach((node) => node.classList.remove("highlighted"));
  }

  window.ZeroToBot = {
    getState: () => clone(state),
    setStep,
    render,
    makeDevBrief,
    makeCodexPrompt,
  };
})();
